package co.com.netcom.qposplugin.android;


import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaInterface;
import org.apache.cordova.CordovaWebView;

import android.app.Activity;
import android.bluetooth.BluetoothDevice;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.res.AssetManager;
import android.os.Environment;
import android.os.Looper;
import android.os.Handler;
import android.os.Message;
import android.util.Log;

import com.dspread.xpos.CQPOSService;
import com.dspread.xpos.QPOSService;
import com.dspread.xpos.QPOSService.CommunicationMode;
import com.dspread.xpos.QPOSService.DoTradeResult;
import com.dspread.xpos.QPOSService.Display;
import com.dspread.xpos.QPOSService.Error;
import com.dspread.xpos.QPOSService.TransactionResult;
import com.dspread.xpos.QPOSService.QPOSServiceListener;
import com.dspread.xpos.QPOSService.UpdateInformationResult;
import com.dspread.xpos.QPOSService.TransactionType;
import com.dspread.xpos.QPOSService.EmvOption;

import co.com.netcom.qposplugin.android.constants.ConstantsInfoQpos;
import co.com.netcom.qposplugin.android.constants.ConstantsStates;
import co.com.netcom.qposplugin.android.constants.ConstantsTagEMV;
import co.com.netcom.qposplugin.android.dto.ResponseServerDTO;


import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.io.*;
import java.lang.Thread;

import java.io.StringReader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.xml.sax.InputSource;

import co.com.netcom.qposplugin.android.commands.CommandInfoQpos;
import co.com.netcom.qposplugin.android.commands.CommandConnectionDevice;
import co.com.netcom.qposplugin.android.commands.CommandTransaction;
import co.com.netcom.qposplugin.android.constants.ConstantsCodeResponse;
import co.com.netcom.qposplugin.android.constants.ConstantsConnection;
import co.com.netcom.qposplugin.android.constants.ConstantsNameCommands;
import co.com.netcom.qposplugin.android.constants.ConstantsPosEntryMode;
import co.com.netcom.qposplugin.android.constants.ConstantsTransacction;
import co.com.netcom.qposplugin.android.dto.CardDTO;
import co.com.netcom.qposplugin.android.dto.ResponseDTO;
import co.com.netcom.qposplugin.android.dto.TagEmvDTO;
import co.com.netcom.qposplugin.android.utilities.UtilityHexa;
import co.com.netcom.qposplugin.android.utilities.UtilityTag;

import org.apache.cordova.PluginResult;


/**
 * Class that implements logic that echoes a string called from JavaScript
 * and the device response.
 *
 * @author Dairo Correa.
 * @date 08 de Noviembre de 2016.
 */


public class QPOSPlugin extends CordovaPlugin{

  private CallbackContext callbackContext;
  private Activity activity;
  private QPOSService pos;
  private MyPosListener QposController;
  private String address;
  private String amount;
  private String typeCardEntry;
  private String deviceH;
  int indexKeyEMV = 0;
  int indexEMV = 2;
  CardDTO card = null;
  String stateTx = "-1";
  String listApp = "";
  boolean isSelectApp = false;
  private UpdateThread updateThread;
  private boolean flagUpdata = false;
  private boolean flagPinSwipe = false;
  private boolean IS_TEST_VERSION = false;
	private PluginResult pluginResult = null;
	private Map map = new HashMap();
  //private UpdateThread updateThread;

  /**
   * Method for initializing the objects, what need for ejecution the plugin
   *
   * @param cordova
   * @param webView
   */
  @Override
  public void initialize(CordovaInterface cordova, CordovaWebView webView) {
    super.initialize(cordova, webView);
    activity = cordova.getActivity();
  }


  /**
   * Method for works out which action the bridge wants to be executed. Then calls the Java code for that action.
   *
   * @param action
   * @param args
   * @param callbackContext
   * @return boolean
   * @throws JSONException
   */
  @Override
  public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {
    ConstantsNameCommands nameComands = new ConstantsNameCommands();
    ConstantsCodeResponse codeResponse = new ConstantsCodeResponse();
    Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS PLUGIN :: "+ action + " - " + args);

    this.callbackContext = callbackContext;
    this.QposController = new MyPosListener(this.activity);
    pos = QPOSService.getInstance(CommunicationMode.BLUETOOTH);
    pos.setConext(this.activity);
    Handler handler = new Handler(Looper.myLooper());
    pos.initListener(handler, QposController);

    if((ConstantsNameCommands.GET_CONNECT_DEVICE).equals(action)) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "GET_CONNECT_DEVICE");
      address = args.getString(0);
      pos.connectBluetoothDevice(ConstantsConnection.AUTO,ConstantsConnection.BOND_TIME,address);
      return true;
    }
    else if((ConstantsNameCommands.IS_CONNECT_DEVICE).equals(action)) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "IS_CONNECT_DEVICE");
      CommandConnectionDevice cmd = new CommandConnectionDevice();
      ResponseDTO res = cmd.getIsConnectDevice(pos.isQposPresent());

      if(res.getCode().equals(ConstantsCodeResponse.SUCCESFUL)){
        callbackContext.success(responseDTOtoJsonString(res));
      }else{
        callbackContext.error(responseDTOtoJsonString(res));
      }

      return true;
    }
    else if((ConstantsNameCommands.GET_DISCONNECT_DEVICE).equals(action)) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "GET_DISCONNECT_DEVICE");
      pos.disconnectBT(address);
      return true;
    }
    else if(ConstantsNameCommands.GET_STATUS_BATTERY.equals(action)) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "GET_STATUS_BATTERY");
      pos.getQposId();
      return true;
    }
    else if((ConstantsNameCommands.START_TRANSACTION).equals(action)) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "START_TRANSACTION");
      Log.d("NUEVO_PARAM_JAVA", args.getString(0));
      String[] temp = args.getString(0).split(",");
      amount = temp[0] + ConstantsTransacction.CENTS;
      deviceH = temp[1];
      Log.d("QPOS_PLUGIN_NATIVE_I", deviceH);
      stateTx=ConstantsStates.DECLINE;
      typeCardEntry = "";
      isSelectApp = false;
      card = null;
      // pos.setCardTradeMode(QPOSService.CardTradeMode.SWIPE_TAP_INSERT_CARD);
      // pos.setOnlineTime(300);
      // pos.doCheckCard(30);
      pos.doTrade(30);
      //pos.powerOnNFC(0,30);
      //callbackContext.success("");

      return true;
    }
    else if((ConstantsNameCommands.DATA_TRANSACTION).equals(action)) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "DATA_TRANSACTION");
      Log.d("DATA_TRANSACTION", "DEMO TOTEADO");
      ResponseDTO res = null ;
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+" APP STATE TX  "+stateTx);
      if(stateTx.equals(ConstantsStates.WAITING_USER_STATE)){
        res = new ResponseDTO(stateTx,"Esperando por el usuario.","");
        callbackContext.success(responseDTOtoJsonString(res));
      }else if(stateTx.equals(ConstantsStates.PLEASE_WAIT_STATE)){
          res = new ResponseDTO(stateTx,"Por favor, Espere","");
          callbackContext.success(responseDTOtoJsonString(res));
      }else if(stateTx.equals(ConstantsStates.PROCESSING_STATE)){
        res = new ResponseDTO(stateTx,"Procesando","");
        callbackContext.success(responseDTOtoJsonString(res));
      }else if(stateTx.equals(ConstantsStates.GET_PIN_STATE)){
        res = new ResponseDTO(stateTx,"Por favor, Digite el pin.","");
        Log.d("ENTRO IF", "DEMO TOTEADO");
        callbackContext.success(responseDTOtoJsonString(res));
      }else if(stateTx.equals(ConstantsStates.APPROVAL)){
        res = new ResponseDTO(stateTx,"Proceso exitoso",card.toJsonString());
        callbackContext.success(responseDTOtoJsonString(res));
      }else if(stateTx.equals(ConstantsStates.FALLBACK)){
        res = new ResponseDTO(stateTx,"No se pudo leer chip deslice la tarjeta","");
        callbackContext.success(responseDTOtoJsonString(res));
      }
      else if(stateTx.equals(ConstantsStates.SELECT_APP)){
        res = new ResponseDTO(stateTx,"Seleccionar App",listApp);
        callbackContext.success(responseDTOtoJsonString(res));
        stateTx = ConstantsStates.SELECTED_APP;
      }
      else if(stateTx.equals(ConstantsStates.SELECTED_APP)){
        stateTx = ConstantsStates.PROCESSING_STATE;
        res = new ResponseDTO(stateTx,"Proceso exitoso","");
        callbackContext.success(responseDTOtoJsonString(res));
        int indexElement = args.getInt(0);
        Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+" APP SELECCIONADA "+indexElement);
        pos.selectEmvApp(indexElement);
      }else if(stateTx.equals(ConstantsStates.ERROR_SWIPE_CHIP)){
        res = new ResponseDTO(stateTx,"Tarjeta Chip, No deslice como Banda.","");
        callbackContext.success(responseDTOtoJsonString(res));
      }else if(stateTx.equals(ConstantsStates.GET_SWIPE_PIN)){
        res = new ResponseDTO(stateTx,"Obteniendo pin tarjeta","");
      }
      else{
        callbackContext.error("");
      }
      return true;
    }
    else if(ConstantsNameCommands.COMPLETE_TRANSACTION.equals(action)){
      Log.d("QPOS_PLUGIN_NATIVE_I", "COMPLETE_TRANSACTION");
      CommandTransaction cmd = new CommandTransaction();
      ResponseServerDTO responseServerDTO = cmd.processResponseServer(args);
      typeCardEntry = "";
      //callbackContext.success("");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS ARPC APROBAL CODE----------"+responseServerDTO.getAprovalCode());
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS ARPC Response CODE----------"+responseServerDTO.getRespondeCode());
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS ARPC TLV --------- RESPONSE" + responseServerDTO.getTlv());

      String strTlv = responseServerDTO.getTlv();//"9100102E4F1B34B0441F690012";
      String strAprobalCode = responseServerDTO.getAprovalCode();
      String strResponseCode = responseServerDTO.getRespondeCode();
      String tlv =strResponseCode+strTlv;
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS ARPC COMPLETO ::"+tlv);
      pos.sendOnlineProcessResult(tlv);
      return true;
    }
    else if(ConstantsNameCommands.STOP_TRANSACTION.equals(action)){
      Log.d("QPOS_PLUGIN_NATIVE_I", "STOP_TRANSACTION");
      pos.resetPosStatus();
      return true;
    }
    else if(ConstantsNameCommands.IS_INSERT_CARD.equals(action)){
      Log.d("QPOS_PLUGIN_NATIVE_I", "IS_INSERT_CARD");
      try {
        
        Thread.sleep(500);
      } catch (Exception e) {
        //TODO: handle exception
      }
      pos.isCardExist(100);
      //callbackContext.success("");
      return true;
    }
    else if(ConstantsNameCommands.PIN_BAND_CARD.equals(action)){
      Log.d("QPOS_PLUGIN_NATIVE_I", "PIN_BAND_CARD");
      //String maskedPan = args.getString(0);
      //pos.getPin(1,0,6,"INGRESE NIP","",maskedPan,30);
      Log.d("QPOS_PLUGIN_NATIVE", "obteniendo pin banda");
      flagPinSwipe = true;
      stateTx = ConstantsStates.GET_SWIPE_PIN;
      pos.setCardTradeMode(QPOSService.CardTradeMode.ONLY_SWIPE_CARD);
      //pos.doCheckCard(30);
      pos.doTrade(30);
      return true;
    }
    else if(action.equals("updateEMVConfigForQPOScute")){
			// TRACE.d("native--> updateEMVConfigForQPOScute");
      // String fileXmlApp = "<app><9F06>00000000000000000000000000000000</9F06><5F2A>0170</5F2A><5F36>00</5F36><9F01>123456789012</9F01><9F15>1234</9F15><9F16>4243544553543132333435363738</9F16><9F1A>0170</9F1A><9F1C>4E4C2D4750373330</9F1C><9F1E>3833323031494343</9F1E><9F33>60F8C8</9F33><9F35>22</9F35><9F39>07</9F39><9F40>7000B0A001</9F40><9F4E>61626364</9F4E><9F53>52</9F53><9F8117>01</9F8117><9F8118>00</9F8118><9F8143>01</9F8143><9F8145>01</9F8145><9F8147>00</9F8147></app><app><9F06>A0000000031010</9F06><DF01>00</DF01><9F09>0001</9F09><9F1B>00000000</9F1B><9F66>32C04000</9F66><9F8125>9F3704</9F8125><9F8127>00</9F8127><9F8128>00</9F8128><9F8129>00000000</9F8129><9F812A>DC4000A800</9F812A><9F812B>0010000000</9F812B><9F812C>DC4004F800</9F812C><9F928100>05010000</9F928100><9F928101>00</9F928101><9F92810A>FE00</9F92810A><9F92810D>000020000000</9F92810D><9F92810E>000006000000</9F92810E><9F92810F>000000000000</9F92810F></app><app><9F06>A0000000032010</9F06><DF01>00</DF01><9F09>0001</9F09><9F1B>00000000</9F1B><9F66>32C04000</9F66><9F8125>9F3704</9F8125><9F8127>00</9F8127><9F8128>00</9F8128><9F8129>00000000</9F8129><9F812A>DC4000A800</9F812A><9F812B>0010000000</9F812B><9F812C>DC4004F800</9F812C><9F928100>05010000</9F928100><9F928101>00</9F928101><9F92810A>FE00</9F92810A><9F92810D>000020000000</9F92810D><9F92810E>000000000000</9F92810E><9F92810F>000000000000</9F92810F></app><app><9F06>A0000000033010</9F06><DF01>00</DF01><9F09>0001</9F09><9F1B>00000000</9F1B><9F66>32C04000</9F66><9F8125>9F3704</9F8125><9F8127>00</9F8127><9F8128>00</9F8128><9F8129>00000000</9F8129><9F812A>DC4000A800</9F812A><9F812B>0010000000</9F812B><9F812C>DC4004F800</9F812C><9F928100>05010000</9F928100><9F928101>00</9F928101><9F92810A>FE00</9F92810A><9F92810D>000020000000</9F92810D><9F92810E>000000000000</9F92810E><9F92810F>000000000000</9F92810F></app><app><9F06>A0000000041010</9F06><DF01>00</DF01><9F09>0096</9F09><9F1B>00000000</9F1B><9F1D>6C00000000000000</9F1D><9F6D>0001</9F6D><9F7E></9F7E><9F8125>9F3704</9F8125><9F8127>00</9F8127><9F8128>00</9F8128><9F8129>00000000</9F8129><9F812A>DC4000A800</9F812A><9F812B>0010000000</9F812B><9F812C>DC4004F800</9F812C><DF60></DF60><DF62></DF62><DF63></DF63><DF8108></DF8108><DF8109></DF8109><DF810A></DF810A><DF810C>02</DF810C><DF810D></DF810D><DF8117>20</DF8117><DF8118>60</DF8118><DF8119>08</DF8119><DF811A>9F6A04</DF811A><DF811B>20</DF811B><DF811C>00</DF811C><DF811D>00</DF811D><DF811E>10</DF811E><DF811F>08</DF811F><DF8120>DC4000A800</DF8120><DF8121>0010000000</DF8121><DF8122>DC4004F800</DF8122><DF8123>000000000000</DF8123><DF8124>999999999900</DF8124><DF8125>999999999900</DF8125><DF8126>000006000000</DF8126><DF812C>00</DF812C></app><app><9F06>A0000000042203</9F06><DF01>00</DF01><9F09>0096</9F09><9F1B>00000000</9F1B><9F1D>6C00000000000000</9F1D><9F6D>0001</9F6D><9F7E></9F7E><9F8125>9F3704</9F8125><9F8127>00</9F8127><9F8128>00</9F8128><9F8129>00000000</9F8129><9F812A>DC4000A800</9F812A><9F812B>0010000000</9F812B><9F812C>DC4004F800</9F812C><DF60></DF60><DF62></DF62><DF63></DF63><DF8108></DF8108><DF8109></DF8109><DF810A></DF810A><DF810C>02</DF810C><DF810D></DF810D><DF8117>20</DF8117><DF8118>60</DF8118><DF8119>08</DF8119><DF811A>9F6A04</DF811A><DF811B>20</DF811B><DF811C>00</DF811C><DF811D>00</DF811D><DF811E>10</DF811E><DF811F>08</DF811F><DF8120>DC4000A800</DF8120><DF8121>0010000000</DF8121><DF8122>DC4004F800</DF8122><DF8123>000000000000</DF8123><DF8124>999999999900</DF8124><DF8125>999999999900</DF8125><DF8126>000006000000</DF8126><DF812C>00</DF812C></app><app><9F06>A0000000043060</9F06><DF01>00</DF01><9F09>0096</9F09><9F1B>00000000</9F1B><9F1D>6C00000000000000</9F1D><9F6D>0001</9F6D><9F7E></9F7E><9F8125>9F3704</9F8125><9F8127>00</9F8127><9F8128>00</9F8128><9F8129>00000000</9F8129><9F812A>DC4000A800</9F812A><9F812B>0010000000</9F812B><9F812C>DC4004F800</9F812C><DF60></DF60><DF62></DF62><DF63></DF63><DF8108></DF8108><DF8109></DF8109><DF810A></DF810A><DF810C>02</DF810C><DF810D></DF810D><DF8117>20</DF8117><DF8118>60</DF8118><DF8119>08</DF8119><DF811A>9F6A04</DF811A><DF811B>20</DF811B><DF811C>00</DF811C><DF811D>00</DF811D><DF811E>10</DF811E><DF811F>08</DF811F><DF8120>DC4000A800</DF8120><DF8121>0010000000</DF8121><DF8122>DC4004F800</DF8122><DF8123>000000000000</DF8123><DF8124>999999999900</DF8124><DF8125>999999999900</DF8125><DF8126>000006000000</DF8126><DF812C>00</DF812C></app><app><9F06>A00000002501</9F06><DF01>00</DF01><9F09>008C</9F09><9F1B>00000000</9F1B><9F8125>9F3704</9F8125><9F8127>00</9F8127><9F8128>00</9F8128><9F8129>00000000</9F8129><9F812A>DC4000A800</9F812A><9F812B>0010000000</9F812B><9F812C>DC4004F800</9F812C><9F8208>000020000000</9F8208><9F8209>000000000000</9F8209><9F820A>000000000000</9F820A></app><app><9F06>A0000001523010</9F06><DF01>00</DF01><9F09>0096</9F09><9F1B>00000000</9F1B><9F8125>9F3704</9F8125><9F8127>00</9F8127><9F8128>00</9F8128><9F8129>00000000</9F8129><9F812A>DC4000A800</9F812A><9F812B>0010000000</9F812B><9F812C>DC4004F800</9F812C><9F8208>999999999999</9F8208><9F8209>000000000000</9F8209><9F820A>000000000000</9F820A></app><app><9F06>A0000003330101</9F06><DF01>00</DF01><9F09>008C</9F09><9F1B>00000000</9F1B><9F1E>3833323031494343</9F1E><9F66>B6004000</9F66><9F8125>9F3704</9F8125><9F8127>00</9F8127><9F8128>00</9F8128><9F8129>00000000</9F8129><9F812A>DC4000A800</9F812A><9F812B>0010000000</9F812B><9F812C>DC4004F800</9F812C><9F928100>05010000</9F928100><9F928101>00</9F928101><9F92810A>FE00</9F92810A><9F92810D>999999999999</9F92810D><9F92810E>000000000000</9F92810E><9F92810F>000000000000</9F92810F></app><app><9F06>AAA00000010003</9F06><DF01>01</DF01><9F09>008C</9F09><9F1B>00000000</9F1B><9F1E>3833323031494343</9F1E><9F66>B6004000</9F66><9F8125>9F3704</9F8125><9F8127>00</9F8127><9F8128>00</9F8128><9F8129>00000000</9F8129><9F812A>DC4000A800</9F812A><9F812B>0010000000</9F812B><9F812C>DC4004F800</9F812C><9F928100>05010000</9F928100><9F928101>00</9F928101><9F92810A>FE00</9F92810A></app><app><9F06>AAA0000001</9F06><DF01>01</DF01><9F09>008C</9F09><9F1B>00000000</9F1B><9F1E>3833323031494343</9F1E><9F66>B6004000</9F66><9F8125>9F3704</9F8125><9F8127>00</9F8127><9F8128>00</9F8128><9F8129>00000000</9F8129><9F812A>DC4000A800</9F812A><9F812B>0010000000</9F812B><9F812C>DC4004F800</9F812C><9F928100>05010000</9F928100><9F928101>00</9F928101><9F92810A>FE00</9F92810A></app><app><9F06>AAA00000010001</9F06><DF01>01</DF01><9F09>008C</9F09><9F1B>00000000</9F1B><9F1E>3833323031494343</9F1E><9F66>B6004000</9F66><9F8125>9F3704</9F8125><9F8127>00</9F8127><9F8128>00</9F8128><9F8129>00000000</9F8129><9F812A>DC4000A800</9F812A><9F812B>0010000000</9F812B><9F812C>DC4004F800</9F812C><9F928100>05010000</9F928100><9F928101>00</9F928101><9F92810A>FE00</9F92810A></app><app><9F06>AAA00000010002</9F06><DF01>01</DF01><9F09>008C</9F09><9F1B>00000000</9F1B><9F1E>3833323031494343</9F1E><9F66>B6004000</9F66><9F8125>9F3704</9F8125><9F8127>00</9F8127><9F8128>00</9F8128><9F8129>00000000</9F8129><9F812A>DC4000A800</9F812A><9F812B>0010000000</9F812B><9F812C>DC4004F800</9F812C><9F928100>05010000</9F928100><9F928101>00</9F928101><9F92810A>FE00</9F92810A></app>";
      // String fileXmlcapk0 = "<capk><9F06>AAA0000001</9F06><9F22>14</9F22><DF02>B31FF647CA3D5470E868FFAFF1D7AE98B15973F4303E5209F1B2677C5E214DC3FC38015FE6181387B9D404B0CED88AABC1F9360907F8416CD7D1AFF56E42EA2E60EC7689E25CEFDD1A37ADCBCA9FBDD0AF2CA5F21378DB401E74EA3D8B2D37A7014B78ED08E10F18021FE37F17A1420F0B617A9A94A4336F854075BE3D26EF8D759A3D3BE907340BF7EA9DD5C77F17F89F574ACF7AAF12AE0AA3F8F2E20C349132987410C100C05FA8F2077B14BFFAC5</DF02><DF03>6BE6BA60529B3FB7AFBB1F72D83FAB3EC31AA05D</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>AAA0000001</9F06><9F22>16</9F22><DF02>B537FC19AF7749FD41F2F601CC9EA0517AB532014AB93058E5DE71744756D7D7EE7CEBC2869276FCDA10538FEA6E1E9FB9E15F3A33411406FC3204BB5831F1F3882F07F72C6D72E98A51860717C0F4E00323D9278D8130A6829D8ED741C5B1F50C561A5C07539286356CFC0313870E1339FE4E4AFBEFA3DBD4FE8C001F20812FE78BAF96D26AF817941CE0D6418F838FD76547CE18AD22E62EF6B4FE0BD9E9E52952907A0641C0C7C6E71F9E3F114C9B</DF02><DF03>3042BBFFE3827BF7EC449D3A489B6B6A27C9C733</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>AAA0000001</9F06><9F22>1A</9F22><DF02>979151BF880C8FD34ED6510C52544FEE1C42AC6666A1EF362411900F5969EAA032CC3CDF28A3682011D23042D62C6E1E390E8FEBE0402CD2DC82176B01622AD6ACE58E3F3F7EEA5EDB96FC22C5FD3AE65F899FC9683943399F114BAE7B02E3DF2450137A4FF3D934E1098C92A1A7C649B2745A3988699AFE6016EAD2ED3C264E05E0D329B013C82E6A58472C440CA4B3D5CF1A451F369BDBD37087DE9F62AE70156CA975E9B3AA5B19DE59D9E9713B50E3AC0EA16008763249B01F38896D5C2EE5762D81DD6FFA66E6367C389286A02061D1EF3E304CAEA254A9D00AE628FF297DA962ABAF443A25F5EE731B12911E4B6053FA65BD7164D3</DF02><DF03>BD658FCEA8318D77805489C3134E2C3224878FAB</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>AAA0000001</9F06><9F22>F1</9F22><DF02>A500B6EED90FEA2999862D101C2F29309A24D1FD3E10501EB70DDE3DE403A5451F6B5CDA0748C87A4E8EFE916FC968FBB3808D6C7561ED3A3B4C74E8A158179C6EE8FEA1B6D9877C2C22B453F5A72E23078970FAAEF7D6855BA452865F2D69CDF675A82CC7CF19BEE4167D5E08F14BB2A756BA8F13B2DB4025895037ED5B7502F257AADC50ADE6C0E424DDE8523414013378ADF59E7CAE88EFA62B5E786BED011BBD64BAAD61F4DADC7B15FCF755CBF1</DF02><DF03>4E01BDB84A0EEE9D14CA789CFF5160FABBE47664</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000003</9F06><9F22>01</9F22><DF02>C696034213D7D8546984579D1D0F0EA519CFF8DEFFC429354CF3A871A6F7183F1228DA5C7470C055387100CB935A712C4E2864DF5D64BA93FE7E63E71F25B1E5F5298575EBE1C63AA617706917911DC2A75AC28B251C7EF40F2365912490B939BCA2124A30A28F54402C34AECA331AB67E1E79B285DD5771B5D9FF79EA630B75</DF02><DF03>D34A6A776011C7E7CE3AEC5F03AD2F8CFC5503CC</DF03><DF04>000003</DF04><DF05>20311217</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000003</9F06><9F22>03</9F22><DF02>B3E5E667506C47CAAFB12A2633819350846697DD65A796E5CE77C57C626A66F70BB630911612AD2832909B8062291BECA46CD33B66A6F9C9D48CED8B4FC8561C8A1D8FB15862C9EB60178DEA2BE1F82236FFCFF4F3843C272179DCDD384D541053DA6A6A0D3CE48FDC2DC4E3E0EEE15F</DF02><DF03>FE70AB3B4D5A1B9924228ADF8027C758483A8B7E</DF03><DF04>000003</DF04><DF05>20311217</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000003</9F06><9F22>08</9F22><DF02>D9FD6ED75D51D0E30664BD157023EAA1FFA871E4DA65672B863D255E81E137A51DE4F72BCC9E44ACE12127F87E263D3AF9DD9CF35CA4A7B01E907000BA85D24954C2FCA3074825DDD4C0C8F186CB020F683E02F2DEAD3969133F06F7845166ACEB57CA0FC2603445469811D293BFEFBAFAB57631B3DD91E796BF850A25012F1AE38F05AA5C4D6D03B1DC2E568612785938BBC9B3CD3A910C1DA55A5A9218ACE0F7A21287752682F15832A678D6E1ED0B</DF02><DF03>20D213126955DE205ADC2FD2822BD22DE21CF9A8</DF03><DF04>000003</DF04><DF05>20311223</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000003</9F06><9F22>09</9F22><DF02>9D912248DE0A4E39C1A7DDE3F6D2588992C1A4095AFBD1824D1BA74847F2BC4926D2EFD904B4B54954CD189A54C5D1179654F8F9B0D2AB5F0357EB642FEDA95D3912C6576945FAB897E7062CAA44A4AA06B8FE6E3DBA18AF6AE3738E30429EE9BE03427C9D64F695FA8CAB4BFE376853EA34AD1D76BFCAD15908C077FFE6DC5521ECEF5D278A96E26F57359FFAEDA19434B937F1AD999DC5C41EB11935B44C18100E857F431A4A5A6BB65114F174C2D7B59FDF237D6BB1DD0916E644D709DED56481477C75D95CDD68254615F7740EC07F330AC5D67BCD75BF23D28A140826C026DBDE971A37CD3EF9B8DF644AC385010501EFC6509D7A41</DF02><DF03>1FF80A40173F52D7D27E0F26A146A1C8CCB29046</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000003</9F06><9F22>10</9F22><DF02>9F2701C0909CCBD8C3ED3E071C69F776160022FF3299807ED7A035ED5752770E232D56CC3BE159BD8F0CA8B59435688922F406F55C75639457BBABEFE9A86B2269EF223E34B91AA6DF2CCAD03B4AD4B443D61575CA960845E6C69040101E231D9EF811AD99B0715065A0E661449C41B4B023B7716D1E4AFF1C90704E55AE1225</DF02><DF03>833B1947778036B6D759FCE3F618DDEB2749372C</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000003</9F06><9F22>20</9F22><DF02>998D2AD946A60FC597D93807DB54B2B0A550871E43F1779F073AF08D9B04ABD17C8A7DAA3E66EE443F30F92648FC53DA57A78364B062FEDB50F7235B937E16E5F6D9E6BA8F106FB325ECA25125111CE04B43098CDEA8A41426FC6D94F8A47619EDB12789581808692CFBA1F38E8008CC5E02066A1889D52F77B9A121E6597F39</DF02><DF03>7AC3D80EF01E9A998F0A77181E64B36747DC51EB</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000003</9F06><9F22>50</9F22><DF02>D11197590057B84196C2F4D11A8F3C05408F422A35D702F90106EA5B019BB28AE607AA9CDEBCD0D81A38D48C7EBB0062D287369EC0C42124246AC30D80CD602AB7238D51084DED4698162C59D25EAC1E66255B4DB2352526EF0982C3B8AD3D1CCE85B01DB5788E75E09F44BE7361366DEF9D1E1317B05E5D0FF5290F88A0DB47</DF02><DF03>B769775668CACB5D22A647D1D993141EDAB7237B</DF03><DF04>010001</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk>";
      // String fileXmlcapk1 = "<capk><9F06>A000000003</9F06><9F22>51</9F22><DF02>DB5FA29D1FDA8C1634B04DCCFF148ABEE63C772035C79851D3512107586E02A917F7C7E885E7C4A7D529710A145334CE67DC412CB1597B77AA2543B98D19CF2CB80C522BDBEA0F1B113FA2C86216C8C610A2D58F29CF3355CEB1BD3EF410D1EDD1F7AE0F16897979DE28C6EF293E0A19282BD1D793F1331523FC71A228800468C01A3653D14C6B4851A5C029478E757F</DF02><DF03>B9D248075A3F23B522FE45573E04374DC4995D71</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000003</9F06><9F22>52</9F22><DF02>AFF740F8DBE763F333A1013A43722055C8E22F41779E219B0E1C409D60AFD45C8789C57EECD71EA4A269A675916CC1C5E1A05A35BD745A79F94555CE29612AC9338769665B87C3CA8E1AC4957F9F61FA7BFFE4E17631E937837CABF43DD6183D6360A228A3EBC73A1D1CDC72BF09953C81203AB7E492148E4CB774CDDFAAC3544D0DD4F8C8A0E9C70B877EA79F2C22E4CE52C69F3EF376F61B0F43A540FE96C63F586310C3B6E39C78C4D647CADB5933</DF02><DF03>D6F78FB14CB58B0E0B67BFA7870FB8DFBEE2AD01</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000003</9F06><9F22>53</9F22><DF02>BCD83721BE52CCCC4B6457321F22A7DC769F54EB8025913BE804D9EABBFA19B3D7C5D3CA658D768CAF57067EEC83C7E6E9F81D0586703ED9DDDADD20675D63424980B10EB364E81EB37DB40ED100344C928886FF4CCC37203EE6106D5B59D1AC102E2CD2D7AC17F4D96C398E5FD993ECB4FFDF79B17547FF9FA2AA8EEFD6CBDA124CBB17A0F8528146387135E226B005A474B9062FF264D2FF8EFA36814AA2950065B1B04C0A1AE9B2F69D4A4AA979D6CE95FEE9485ED0A03AEE9BD953E81CFD1EF6E814DFD3C2CE37AEFA38C1F9877371E91D6A5EB59FDEDF75D3325FA3CA66CDFBA0E57146CC789818FF06BE5FCC50ABD362AE4B80996D</DF02><DF03>AC213A2E0D2C0CA35AD0201323536D58097E4E57</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000003</9F06><9F22>58</9F22><DF02>99552C4A1ECD68A0260157FC4151B5992837445D3FC57365CA5692C87BE358CDCDF2C92FB6837522842A48EB11CDFFE2FD91770C7221E4AF6207C2DE4004C7DEE1B6276DC62D52A87D2CD01FBF2DC4065DB52824D2A2167A06D19E6A0F781071CDB2DD314CB94441D8DC0E936317B77BF06F5177F6C5ABA3A3BC6AA30209C97260B7A1AD3A192C9B8CD1D153570AFCC87C3CD681D13E997FE33B3963A0A1C79772ACF991033E1B8397AD0341500E48A24770BC4CBE19D2CCF419504FDBF0389BC2F2FDCD4D44E61F</DF02><DF03>E6D302EBE7DC6F267E4D00F7D488F0AB6235F105</DF03><DF04>010001</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000004</9F06><9F22>06</9F22><DF02>CB26FC830B43785B2BCE37C81ED334622F9622F4C89AAE641046B2353433883F307FB7C974162DA72F7A4EC75D9D657336865B8D3023D3D645667625C9A07A6B7A137CF0C64198AE38FC238006FB2603F41F4F3BB9DA1347270F2F5D8C606E420958C5F7D50A71DE30142F70DE468889B5E3A08695B938A50FC980393A9CBCE44AD2D64F630BB33AD3F5F5FD495D31F37818C1D94071342E07F1BEC2194F6035BA5DED3936500EB82DFDA6E8AFB655B1EF3D0D7EBF86B66DD9F29F6B1D324FE8B26CE38AB2013DD13F611E7A594D675C4432350EA244CC34F3873CBA06592987A1D7E852ADC22EF5A2EE28132031E48F74037E3B34AB747F</DF02><DF03>F910A1504D5FFB793D94F3B500765E1ABCAD72D9</DF03><DF04>000003</DF04><DF05>20311223</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000004</9F06><9F22>F0</9F22><DF02>7563C51B5276AA6370AB8405522414645832B6BEF2A989C771475B2E8DC654DC8A5BFF9E28E31FF1A370A40DC3FFEB06BC85487D5F1CB61C2441FD71CBCD05D883F8DE413B243AFC9DCA768B061E35B884B5D21B6B016AA36BA12DABCFE49F8E528C893C34C7D4793977E4CC99AB09640D9C7AAB7EC5FF3F40E3D4D18DF7E3A7</DF02><DF03>AE667445F8DE6F82C38800E5EBABA322F03F58F2</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000004</9F06><9F22>F1</9F22><DF02>A0DCF4BDE19C3546B4B6F0414D174DDE294AABBB828C5A834D73AAE27C99B0B053A90278007239B6459FF0BBCD7B4B9C6C50AC02CE91368DA1BD21AAEADBC65347337D89B68F5C99A09D05BE02DD1F8C5BA20E2F13FB2A27C41D3F85CAD5CF6668E75851EC66EDBF98851FD4E42C44C1D59F5984703B27D5B9F21B8FA0D93279FBBF69E090642909C9EA27F898959541AA6757F5F624104F6E1D3A9532F2A6E51515AEAD1B43B3D7835088A2FAFA7BE7</DF02><DF03>D8E68DA167AB5A85D8C3D55ECB9B0517A1A5B4BB</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000004</9F06><9F22>FA</9F22><DF02>A90FCD55AA2D5D9963E35ED0F440177699832F49C6BAB15CDAE5794BE93F934D4462D5D12762E48C38BA83D8445DEAA74195A301A102B2F114EADA0D180EE5E7A5C73E0C4E11F67A43DDAB5D55683B1474CC0627F44B8D3088A492FFAADAD4F42422D0E7013536C3C49AD3D0FAE96459B0F6B1B6056538A3D6D44640F94467B108867DEC40FAAECD740C00E2B7A8852D</DF02><DF03>5BED4068D96EA16D2D77E03D6036FC7A160EA99C</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000004</9F06><9F22>FB</9F22><DF02>A9548DFB398B48123FAF41E6CFA4AE1E2352B518AB4BCEFECDB0B3EDEC090287D88B12259F361C1CC088E5F066494417E8EE8BBF8991E2B32FF16F994697842B3D6CB37A2BB5742A440B6356C62AA33DB3C455E59EDDF7864701D03A5B83EE9E9BD83AB93302AC2DFE63E66120B051CF081F56326A71303D952BB336FF12610D</DF02><DF03>A54CB4AEC9BD9D4F579756A2B9E09CDB49E477E8</DF03><DF04>000002</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000004</9F06><9F22>FC</9F22><DF02>B37BFD2A9674AD6221C1A001081C62653DC280B0A9BD052C677C913CE7A0D902E77B12F4D4D79037B1E9B923A8BB3FAC3C612045BB3914F8DF41E9A1B61BFA5B41705A691D09CE6F530FE48B30240D98F4E692FFD6AADB87243BA8597AB237586ECF258F4148751BE5DA5A3BE6CC34BD</DF02><DF03>74755521F60CACF9D20E759957D241E12BE0C957</DF03><DF04>000002</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000004</9F06><9F22>FD</9F22><DF02>B3572BA49AE4C7B7A0019E5189E142CFCDED9498DDB5F0470567AB0BA713B8DA226424622955B54B937ABFEFAAD97919E377621E22196ABC1419D5ADC123484209EA7CB7029E66A0D54C5B45C8AD615AEDB6AE9E0A2F75310EA8961287241245</DF02><DF03>623189465E3148DD2AC28E1934915803AD9A60E4</DF03><DF04>000002</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk>";
      // String fileXmlcapk2 = "<capk><9F06>A000000004</9F06><9F22>FF</9F22><DF02>B855CC64313AF99C453D181642EE7DD21A67D0FF50C61FE213BCDC18AFBCD07722EFDD2594EFDC227DA3DA23ADCC90E3FA907453ACC954C47323BEDCF8D4862C457D25F47B16D7C3502BE081913E5B0482D838484065DA5F6659E00A9E5D570ADA1EC6AF8C57960075119581FC81468D</DF02><DF03>B4E769CECF7AAC4783F305E0B110602A07A6355B</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000025</9F06><9F22>02</9F22><DF02>AF4B8D230FDFCB1538E975795A1DB40C396A5359FAA31AE095CB522A5C82E7FFFB252860EC2833EC3D4A665F133DD934EE1148D81E2B7E03F92995DDF7EB7C90A75AB98E69C92EC91A533B21E1C4918B43AFED5780DE13A32BBD37EBC384FA3DD1A453E327C56024DACAEA74AA052C4D</DF02><DF03>33F5B0344943048237EC89B275A95569718AEE20</DF03><DF04>000003</DF04><DF05>20311216</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000025</9F06><9F22>03</9F22><DF02>B0C2C6E2A6386933CD17C239496BF48C57E389164F2A96BFF133439AE8A77B20498BD4DC6959AB0C2D05D0723AF3668901937B674E5A2FA92DDD5E78EA9D75D79620173CC269B35F463B3D4AAFF2794F92E6C7A3FB95325D8AB95960C3066BE548087BCB6CE12688144A8B4A66228AE4659C634C99E36011584C095082A3A3E3</DF02><DF03>8708A3E3BBC1BB0BE73EBD8D19D4E5D20166BF6C</DF03><DF04>000003</DF04><DF05>20311216</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000025</9F06><9F22>0F</9F22><DF02>C8D5AC27A5E1FB89978C7C6479AF993AB3800EB243996FBB2AE26B67B23AC482C4B746005A51AFA7D2D83E894F591A2357B30F85B85627FF15DA12290F70F05766552BA11AD34B7109FA49DE29DCB0109670875A17EA95549E92347B948AA1F045756DE56B707E3863E59A6CBE99C1272EF65FB66CBB4CFF070F36029DD76218B21242645B51CA752AF37E70BE1A84FF31079DC0048E928883EC4FADD497A719385C2BBBEBC5A66AA5E5655D18034EC5</DF02><DF03>A73472B3AB557493A9BC2179CC8014053B12BAB4</DF03><DF04>000003</DF04><DF05>20311217</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000025</9F06><9F22>10</9F22><DF02>CF98DFEDB3D3727965EE7797723355E0751C81D2D3DF4D18EBAB9FB9D49F38C8C4A826B99DC9DEA3F01043D4BF22AC3550E2962A59639B1332156422F788B9C16D40135EFD1BA94147750575E636B6EBC618734C91C1D1BF3EDC2A46A43901668E0FFC136774080E888044F6A1E65DC9AAA8928DACBEB0DB55EA3514686C6A732CEF55EE27CF877F110652694A0E3484C855D882AE191674E25C296205BBB599455176FDD7BBC549F27BA5FE35336F7E29E68D783973199436633C67EE5A680F05160ED12D1665EC83D1997F10FD05BBDBF9433E8F797AEE3E9F02A34228ACE927ABE62B8B9281AD08D3DF5C7379685045D7BA5FCDE58637</DF02><DF03>C729CF2FD262394ABC4CC173506502446AA9B9FD</DF03><DF04>000003</DF04><DF05>20311218</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000025</9F06><9F22>96</9F22><DF02>BC9AA294B1FDD263176E3243D8F448BBFFCB6ABD02C31811289F5085A9262B8B1B7C6477EB58055D9EF32A83D1B72D4A1471ECA30CE76585C3FD05372B686F92B795B1640959201523230149118D52D2425BD11C863D9B2A7C4AD0A2BFDBCA67B2713B290F493CD5521E5DDF05EF1040FC238D0A851C8E3E3B2B1F0D5D9D4AED</DF02><DF03>E7433E5CFC6001151D8ECD252EBC6E61F7AB2217</DF03><DF04>000003</DF04><DF05>20311216</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000152</9F06><9F22>01</9F22><DF02>8D1727AB9DC852453193EA0810B110F2A3FD304BE258338AC2650FA2A040FA10301EA53DF18FD9F40F55C44FE0EE7C7223BC649B8F9328925707776CB86F3AC37D1B22300D0083B49350E09ABB4B62A96363B01E4180E158EADDD6878E85A6C9D56509BF68F0400AFFBC441DDCCDAF9163C4AACEB2C3E1EC13699D23CDA9D3AD</DF02><DF03>E0C2C1EA411DB24EC3E76A9403F0B7B6F406F398</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000152</9F06><9F22>03</9F22><DF02>BF321241BDBF3585FFF2ACB89772EBD18F2C872159EAA4BC179FB03A1B850A1A758FA2C6849F48D4C4FF47E02A575FC13E8EB77AC37135030C5600369B5567D3A7AAF02015115E987E6BE566B4B4CC03A4E2B16CD9051667C2CD0EEF4D76D27A6F745E8BBEB45498ED8C30E2616DB4DBDA4BAF8D71990CDC22A8A387ACB21DD88E2CC27962B31FBD786BBB55F9E0B041</DF02><DF03>CA1E9099327F0B786D8583EC2F27E57189503A57</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000152</9F06><9F22>04</9F22><DF02>8EEEC0D6D3857FD558285E49B623B109E6774E06E9476FE1B2FB273685B5A235E955810ADDB5CDCC2CB6E1A97A07089D7FDE0A548BDC622145CA2DE3C73D6B14F284B3DC1FA056FC0FB2818BCD7C852F0C97963169F01483CE1A63F0BF899D412AB67C5BBDC8B4F6FB9ABB57E95125363DBD8F5EBAA9B74ADB93202050341833DEE8E38D28BD175C83A6EA720C262682BEABEA8E955FE67BD9C2EFF7CB9A9F45DD5BDA4A1EEFB148BC44FFF68D9329FD</DF02><DF03>17F971CAF6B708E5B9165331FBA91593D0C0BF66</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>A000000152</9F06><9F22>05</9F22><DF02>E1200E9F4428EB71A526D6BB44C957F18F27B20BACE978061CCEF23532DBEBFAF654A149701C14E6A2A7C2ECAC4C92135BE3E9258331DDB0967C3D1D375B996F25B77811CCCC06A153B4CE6990A51A0258EA8437EDBEB701CB1F335993E3F48458BC1194BAD29BF683D5F3ECB984E31B7B9D2F6D947B39DEDE0279EE45B47F2F3D4EEEF93F9261F8F5A571AFBFB569C150370A78F6683D687CB677777B2E7ABEFCFC8F5F93501736997E8310EE0FD87AFAC5DA772BA277F88B44459FCA563555017CD0D66771437F8B6608AA1A665F88D846403E4C41AFEEDB9729C2B2511CFE228B50C1B152B2A60BBF61D8913E086210023A3AA499E423</DF02><DF03>12BCD407B6E627A750FDF629EE8C2C9CC7BA636A</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>AAA0000001</9F06><9F22>19</9F22><DF02>E93F3B90109F4646B76B60033551084FB6E0B89AC9A7C94DF324C83361F0CD7A2C68455BAE465A3A9FDBA9D44303545CE165D46A3870EE33CC0CBB320E7B3B674CD9E4CF2E7975DE27A4FAA1D40B850B991E131E9A47913215781F86C4A18C94F1397613156B3152C5EB4E80C1FDF9D17953BDC0A75DD8640ECDD41D703BEDF2D047956EC938F7ED21B250CDE006C920C85226C81F869D4F35B82DF3F358717763C97D845C151C31920D588370A64694E883E45C0943CC92FF26CB98347DEC93964DAFACFCFC4E27F73E51D771340184F38850A3B65F08AA09F2194A40672827A3252B1526BF9E994F094691D5D2D0C96A7749A2AB3BD4E1</DF02><DF03>E1F40AA93CF91B8235A2D92644463885149B8AC4</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>AAA0000001</9F06><9F22>15</9F22><DF02>9F195B12D96931CFEF724283EFA2B564EAC6033A854DAB488B66D0E0EA242FD1E77EFBC5AB9D571025A6B47378FC868C655255C2EDFBAB76FE9EEC0BACA132CC91C4305D5F10F8170660DFDD3E16EBDA280A858590B790615FFC46B46F74D981D50B004A15A504FD50C42FA360CF5C019CAF0CA9A3D6D03EED40F31DF4AA0BEC72CC724EDC41570B94C9766AE3C399136C6DD551151BA079274919ED83F4D2A69942406AF6BBA0EC1E5EECBEA47D6FBD</DF02><DF03>87185F1BB916EBCE72BDC64818F0A48479A96034</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>AAA0000001</9F06><9F22>18</9F22><DF02>BCCCA29AA4E4755BA36B0187D10D90888E1CFAAAA3FCD22078EC9D3E8A0687B101BB5AEBEF0F2E531935C81835B1C70BF3FD3F83EC9C95AAE1D7FDE1A0DEDC2CFDB2388E82C2A19A02ADC45C6833DBC8D6CE40E2DD9EAA44E301B8A5C62214B4906529D4F080D11D12E484C51ECF6FF825240BA1D14ABED8917610CAD68951704E876DDBE289E47A2E3940B74766A9D56E259130E34EBB3BCE6F5A8A520ABF6973716816BC6F135CBBEC51E36562221DEAD7FA163C753C423ADDB7E8BA7A7681F50AF9B0971E99A287C1F64972FEFDA1CFD809682AD6D3EAAC47B7686872F86E51402453F888B7D7AE64B507F16B34E07726312242006C9B</DF02><DF03>32FFDCF67CE0EB1BF6BDCD0168D3D7B0B7FFF3B5</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk><capk><9F06>AAA0000001</9F06><9F22>05</9F22><DF02>B40C4863DEFF8314F10438E29CCF8017DA2763FDA5C8C6EC6153758F1E306D1BAAAF67D5790F959ACC07EFAD0C0081731E45B694E030262C897517B2C0B25B17E362AC2FD2D00194FDDB3BDC85DC85DE1FDC46F8277E20DEADB9A68C70724076EE589F94AF7B8900F2AC63396C775EED5102AE6AE53375FB4B6654115D130F1EDC0AD8478796E9C485D50C6481238ADD9B0C262D58EE41D86BF656C58E4DA74C9028DCF804C4E45ACD011D48E6FEE6D3</DF02><DF03>ED7828B72338B382A9C5EE7686C6F4CC60120305</DF03><DF04>000003</DF04><DF05>20311222</DF05><DF06>01</DF06><DF07>01</DF07></capk>";
      
      // String xmlFinal = fileXmlApp+fileXmlcapk0+fileXmlcapk1+fileXmlcapk2;
      // Log.d("TEMP_XMLFinal", xmlFinal);

      String tempXml = args.getString(0);
      Log.d("TEMP_XML", tempXml);

      // String [] arr = tempXml.split(">");
      // String temp = "";
      // for(int i = 0; i < arr.length; i++){
      //   if(i==0){
      //     temp += arr[i] + ">" + "\n";
      //   }else if(i==arr.length-1){
      //     temp += arr[i] + ">" + "\n";
      //   }else if(arr[i].equals("<app")){
      //     temp += arr[i] + ">" + "\n";
      //   }else if(arr[i].equals("</app")){
      //     temp += arr[i] + ">" + "\n" +"\n";
      //   }else if(arr[i].equals("<capk")){
      //     temp += arr[i] + ">" + "\n";
      //   }else if(arr[i].equals("</capk")){
      //     temp += arr[i] + ">" + "\n" +"\n";
      //   }else{
      //     temp += arr[i] + ">"+ arr[i+1] + ">" + "\n";
      //     i++;
      //   }
      //   Log.d("ENTRO_FORXML:: ",temp);
         
      // }
      // Log.d("TEMP_FOR", temp);
			callbackKeepResult(PluginResult.Status.OK,true,"updateEMVConfigForQPOScute","Actualizando QPOS cute, Espera...");
      // byte[] bytes = readAssetsLine("emv_profile_tlv_QPOScute.xml", cordova.getActivity());
      // byte[] bytes = readAssetsLine(xmlFinal, cordova.getActivity());
      
      // TRACE.d("bytes: "+ QPOSUtil.byteArray2Hex(bytes));
			pos.updateEMVConfigByXml(tempXml);
			// pos.updateEMVConfigByXml(new String(bytes));
      return true;
		}else if(action.equals("updateEMVConfigForQPOSmini")){
      // TRACE.d("native--> updateEMVConfigForQPOSmini");

      String tempXml = args.getString(0);
      Log.d("TEMP_XML", tempXml);
      callbackKeepResult(PluginResult.Status.OK,true,"updateEMVConfigForQPOSmini","Actualizando mini, Espera...");
			byte[] bytes = readAssetsLine("emv_profile_tlv_QPOSmini.xml", cordova.getActivity());
			// TRACE.d("bytes: "+ QPOSUtil.byteArray2Hex(bytes));
      // UtilityHexa.byteArray2Hex(bytes);
			pos.updateEMVConfigByXml(new String(tempXml));
      return true;
		}
    else if(ConstantsNameCommands.CONFIGURATION_INITIAL.equals(action)){

      String temp = args.getString(0);
      String[] pathBin = temp.split(",");
      String app = pathBin[0];
      String capk = pathBin[1];
      String flagPath = "false";
      // app = app.replace("file:///storage/emulated/0", "");
      // capk = capk.replace("file:///storage/emulated/0", "");
      Log.d("RUTA_EMV_QPOS_APP: ", app);
      Log.d("RUTA_EMV_QPOS_CAPK: ", capk);

      Log.d("QPOS_PLUGIN_NATIVE_I", "CONFIGURATION_INITIAL");
      indexKeyEMV = 0;
      indexEMV = 2;

      //PRUEBAS
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS-------------PRUEBAS CHARLIE--------------");
      Log.d("QPOS_PLUGIN_NATIVE", "updatePosFirmware");
      //Log.d("CHAZZ KA", "keyactual");
      //pos.getKeyCheckValue(0, QPOSService.CHECKVALUE_KEYTYPE.DUKPT_MKSK_ALLTYPE);


      byte[] upgrader;

      flagUpdata = false;
      String emvAppCfg;
      String emvCapkCfg;
      if (IS_TEST_VERSION) {
        Log.d("CHAZZ", "Is test version -  onRequestQposConnected - Actualizando EMV ");
        emvAppCfg  = UtilityHexa.byteArray2Hex(readLine("emv_app_prod.bin"));
        emvCapkCfg = UtilityHexa.byteArray2Hex(readLine("emv_capk_prod.bin"));
      } else {
        Log.d("ARCHIVOS QUE LLEGAN", "AAAAAA ");
        System.out.println(flagPath + " " + app.getClass().getName() + " " + capk);

        if (app.equals(flagPath)) {
          Log.d("CHAZZ", "NO HAYU RUTA, TOMA ARCHIVOS LOCAL ");
          emvAppCfg  = UtilityHexa.byteArray2Hex(readLine("emv_app_prod.bin"));
          emvCapkCfg = UtilityHexa.byteArray2Hex(readLine("emv_capk_prod.bin"));
        } else {
          Log.d("CHAZZ", "No Is test version -  onRequestQposConnected - Actualizando de url EMV ");
          emvAppCfg  = UtilityHexa.byteArray2Hex(readLine2(app));
          emvCapkCfg = UtilityHexa.byteArray2Hex(readLine2(capk));
        }
      }
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS emvAppCfg emv_app : "+emvAppCfg);
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS emvCapkCfg emv_capk: "+emvCapkCfg);
      //String xmlEmv = "<app><9F06>00000000000000000000000000000000</9F06><5F2A>0170</5F2A><5F36>02</5F36><9F01>000000000000</9F01><9F09>008C</9F09><9F15>0000</9F15><9F16>000000000000000000000000000000</9F16><9F1A>0170</9F1A><9F1B>00000000</9F1B><9F1C>0000000000000000</9F1C><9F1E>0000000000000000</9F1E><9F33>60F8C8</9F33><9F35>22</9F35><9F39>00</9F39><9F3C>0170</9F3C><9F3D>00</9F3D><9F40>E000F0F001</9F40><9F4E></9F4E><9F66>B6C0C000</9F66><9F73>000000</9F73><9F7B>000000001388</9F7B><DF01>01</DF01><DF11>F06004A800</DF11><DF12>F06854F800</DF12><DF13>0810A80000</DF13><DF14></DF14><DF15>00000000</DF15> <DF16>00</DF16><DF17>00</DF17><DF19>000000000000</DF19><DF20>999999999999</DF20><DF21>000005000000</DF21><DF72>F4F0F0FAAFFE8000</DF72><DF73>01</DF73><DF74>0F</DF74><DF75>01</DF75><DF76></DF76><DF78>000000000000</DF78><DF79>60D8C8</DF79><DF7A>E000F0F001</DF7A></app>";

      //Overloaded function
      //pos.updateEmvConfig(String xmlEmv);
      pos.updateEmvConfig(emvAppCfg,emvCapkCfg);


      // updateThread = new UpdateThread();
      // updateThread.start();

      /*
       if (IS_TEST_VERSION) {
         Log.d("QPOS_PLUGIN_NATIVE", "SI ES TEST VERSION: ");
         upgrader = readLine("upgrader.asc");
       } else {
         Log.d("QPOS_PLUGIN_NATIVE", "NO ES TEST VERSION: ");
         upgrader = readLine("upgrader_pro.asc");
       }
      flagUpdata = true;
        //updateThread = new UpdateThread();
        //updateThread.start();
       int a= pos.updatePosFirmware(upgrader, address);
       if(a==-1){
         Log.d("QPOS_PLUGIN_NATIVE", "updatePosFirmware complete success please keep the device charging");
         flagUpdata = false;
         ResponseDTO res = new ResponseDTO(ConstantsStates.DECLINE,"Debe mantener el lector conectado a la corriente.","");
         callbackContext.error(responseDTOtoJsonString(res));
       }else {
         updateThread = new UpdateThread();
         updateThread.start();
       }
       */
      return true;
    }
    return false;
  }

	public static byte[] readAssetsLine(String fileName, Context context) {
		ByteArrayOutputStream buffer = new ByteArrayOutputStream();
		try {
      
			 ContextWrapper contextWrapper = new ContextWrapper(context);
       AssetManager assetManager = contextWrapper.getAssets();
			 InputStream inputStream = assetManager.open(fileName);
      
			byte[] data = new byte[512];
			int current = 0;
			while ((current = inputStream.read(data, 0, data.length)) != -1) {
				buffer.write(data, 0, current);
      }

		} catch (Exception e) {
			e.printStackTrace();
			return  null;
    }
    
    Log.d("BUFER_UPDATE", buffer.toString());
		return buffer.toByteArray();
	}

	public void callbackKeepResult(PluginResult.Status status,Boolean isKeep,String key, String message){
		if (!map.containsKey(key)){
			return;
		}
		pluginResult = new PluginResult(status,message);
		pluginResult.setKeepCallback(isKeep);
		CallbackContext callbackContext = new CallbackContext((String) map.get(key),webView);
		callbackContext.sendPluginResult(pluginResult);
	}

  private String responseDTOtoJsonString(ResponseDTO response) throws JSONException {
    Log.d("QPOS_PLUGIN_NATIVE_I", "responseDTOtoJsonString");
    JSONObject obj = new JSONObject();
    obj.put("code", response.getCode());
    obj.put("message", response.getMessage());
    obj.put("data", response.getData());
    return obj.toString();
  }

  private byte[] readLine2(String Filename) {
    InputStream inStream = null;
    ByteArrayOutputStream outStream = new ByteArrayOutputStream();
    Log.d("Leyendo archivo - CHAZZ", Filename);
    File sdcard = Environment.getExternalStorageDirectory();
    System.out.println("File Chazz external: " + sdcard);
    Log.d("Leyendo archivo - CHAZZ", sdcard.toString());
    try{

      File afile =new File(sdcard, Filename);

      inStream = new FileInputStream(afile);

      byte[] buffer = new byte[1024];

      int length;
      //copy the file content in bytes
      while ((length = inStream.read(buffer)) > 0){

        outStream.write(buffer, 0, length);

      }

      System.out.println("File is copied successful!");

    }catch(IOException e){
      e.printStackTrace();
    }

    return outStream.toByteArray();

  }

  private byte[] readLine(String Filename) {
    Log.d("QPOS_PLUGIN_NATIVE_I", "readLine");
    ByteArrayOutputStream buffer = new ByteArrayOutputStream();
    try {
      android.content.ContextWrapper contextWrapper = new ContextWrapper(this.activity);
      AssetManager assetManager = contextWrapper.getAssets();
      InputStream inputStream = assetManager.open(Filename);
      byte[] data = new byte[50];
      int current = 0;
      while ((current = inputStream.read(data,0,data.length)) != -1) {
        buffer.write(data,0,current);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return buffer.toByteArray();
  }

  private static final int PROGRESS_UP = 1001;
  private Handler updata_handler = new Handler() {
    public void handleMessage(Message msg) {
      switch (msg.what) {
        case PROGRESS_UP:
          Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS" + " PROGESS UPDATE " + msg.obj.toString() + "%");
          break;
        default:
          break;
      }
  };
  };
  class UpdateThread extends Thread {

    public void run() {

      while (flagUpdata) {
        try {
          Thread.sleep(5);
        } catch (InterruptedException e) {
          // TODO Auto-generated catch block
          e.printStackTrace();
        }
        int progress = -1;
        progress = pos.getUpdateProgress();
        if (progress < 100) {
          Message msg = updata_handler.obtainMessage();
          msg.what = PROGRESS_UP;
          msg.obj = progress;
          msg.sendToTarget();
          continue;
        }
        Message msg = updata_handler.obtainMessage();
        msg.what = PROGRESS_UP;
        msg.obj = "升级完成";
        msg.sendToTarget();
        break;
      }
    };
  };

  class MyPosListener  extends CQPOSService {
    private Activity activity;
    public MyPosListener(Activity activity) {
      this.activity = activity;
    }
    @Override
    public void onRequestWaitingUser() {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestWaitingUser");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestWaitingUser");
      Log.d("QPOS_PLUGIN_NATIVE", "STATE TX " + stateTx);
      if(!stateTx.equals(ConstantsStates.ERROR_SWIPE_CHIP) && !stateTx.equals(ConstantsStates.GET_SWIPE_PIN)){
        if(typeCardEntry.equals(ConstantsPosEntryMode.FALLBACK)){
          stateTx = ConstantsStates.FALLBACK;
          callbackContext.success(stateTx);
        }else{
          stateTx = ConstantsStates.WAITING_USER_STATE;
          callbackContext.success(stateTx);
        }
      }
      Log.d("QPOS_PLUGIN_NATIVE", "STATE TX 2" + stateTx);
    }

    @Override
    public void onDoTradeResult(DoTradeResult result, Hashtable<String, String> decodeData) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onDoTradeResult");
      Log.d("QPOS_PLUGIN_NATIVE_I", decodeData.toString());
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onDoTradeResult");
      flagPinSwipe = false;
      if((result.name()).equals(DoTradeResult.MCR.name())){
        //Se lee tarjeta banda
        card = null;
        CommandTransaction cmd = new CommandTransaction();
        if(typeCardEntry.equals(ConstantsPosEntryMode.FALLBACK)){
          stateTx =  ConstantsStates.PROCESSING_STATE;
          card = cmd.getDataTransactionFallback(result,decodeData);
          try {
            stateTx =  ConstantsStates.APPROVAL;
            ResponseDTO res = new ResponseDTO(ConstantsCodeResponse.SUCCESFUL,"Exitoso",card.toJsonString());
            callbackContext.success(responseDTOtoJsonString(res));
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else{
          typeCardEntry = ConstantsPosEntryMode.MAGNETIC_SWIP;
          stateTx =  ConstantsStates.PROCESSING_STATE;
          card = cmd.getDataTransactionSwipBand(result,decodeData);
          if(card.isChip()){
            stateTx =  ConstantsStates.ERROR_SWIPE_CHIP;
            pos.doCheckCard(30);
            //pos.doTrade(30);
          }else{
            try {
              stateTx =  ConstantsStates.APPROVAL;
              ResponseDTO res = new ResponseDTO(ConstantsCodeResponse.SUCCESFUL,"Exitoso",card.toJsonString());
              callbackContext.success(responseDTOtoJsonString(res));
            } catch (JSONException e) {
              e.printStackTrace();
            }
          }

        }
      }else if((result.name()).equals(DoTradeResult.ICC.name())){
        //Se lee tarjeta EMV
        Log.d("CHAZZ", "1 pos.doEmvApp");
        typeCardEntry = ConstantsPosEntryMode.CHIP;
        pos.doEmvApp(QPOSService.EmvOption.START);
      } else if (result == DoTradeResult.NOT_ICC) {
        Log.d("CHAZZ", "2 pos.setCardTradeMode");
        typeCardEntry = ConstantsPosEntryMode.FALLBACK;
        pos.setCardTradeMode(QPOSService.CardTradeMode.ONLY_SWIPE_CARD);
        //pos.doTrade(30);
        pos.doCheckCard(30);
      } else if (result == DoTradeResult.NONE) {
        Log.d("CHAZZ", "3 NONE");
        stateTx =  ConstantsStates.DECLINE;
        callbackContext.error("");
      } else if (result == DoTradeResult.BAD_SWIPE) {

      } else if (result == DoTradeResult.NO_RESPONSE) {
        stateTx =  ConstantsStates.DECLINE;
        callbackContext.error("");
      }
      else if ((result == DoTradeResult.NFC_ONLINE) || (result == DoTradeResult.NFC_OFFLINE)) {
        Log.d("CHAZZ", "ENTRO CONTACLESS");
        stateTx =  ConstantsStates.PROCESSING_STATE;
        card = null;
        CommandTransaction cmd = new CommandTransaction();
        String hashtableTrack2 = pos.getICCTag(QPOSService.EncryptType.ENCRYPTED,1, 1, ConstantsTagEMV.TAG_57.getName()).get("tlv");
        String hashtableTrack2Plain = pos.getICCTag(QPOSService.EncryptType.PLAINTEXT,1, 1, ConstantsTagEMV.TAG_57.getName()).get("tlv");
        String hashtableAid = pos.getICCTag(QPOSService.EncryptType.PLAINTEXT,1, 1, ConstantsTagEMV.TAG_84.getName()).get("tlv");
        //This means that the reading is empty and should use another one.
        if (hashtableAid.equals("8400")) {
          hashtableAid = pos.getICCTag(QPOSService.EncryptType.PLAINTEXT,1, 1, ConstantsTagEMV.TAG_9F06.getName()).get("tlv");
        }
        String hashtableARQC = pos.getICCTag(QPOSService.EncryptType.PLAINTEXT,1, 1, ConstantsTagEMV.TAG_9F26.getName()).get("tlv");
        Log.d("PROBANDO_TAG_ARQC", hashtableARQC);

        String hashtableLabel = pos.getICCTag(QPOSService.EncryptType.PLAINTEXT,1, 1, ConstantsTagEMV.TAG_9F12.getName()).get("tlv");
        Log.d("PROBANDO_TAG_9F12", hashtableLabel);
        //String hashtableCvm = pos.getICCTag(QPOSService.EncryptType.PLAINTEXT,1,1,"DF21").get("tlv");
        ArrayList<TagEmvDTO> array = UtilityTag.getListTagEMVSaleContactless();
        String tagSale = "";
        String infotag;
        for(TagEmvDTO tag : array){
          infotag = pos.getICCTag(QPOSService.EncryptType.PLAINTEXT,1, 1, tag.getName()).get("tlv");
          if(tag.getName().equals(ConstantsTagEMV.TAG_9F03.getName())){
            infotag = "9F0306000000000000";
          }else if(tag.getName().equals(ConstantsTagEMV.TAG_9F1E.getName())){
            infotag = "9F1E083833323031494343";
          }
          Log.d("QPOS_PLUGIN_NATIVE", "Info TLV TAG :: "+tag.getName()+ "  "+ infotag);
          tagSale = tagSale + infotag;
        }
        Hashtable<String, String> nfcBatchData = pos.getNFCBatchData();
        card = cmd.getDataTransactionContactless(decodeData,nfcBatchData,hashtableTrack2, hashtableAid, hashtableARQC,hashtableTrack2Plain,hashtableLabel,tagSale);
        // card.setCvmLimit("5000");
        System.out.println("IMPRIMENDO CARD CHAZZ");
        System.out.println(card);
        try {
          if (card != null) {
            stateTx = ConstantsStates.APPROVAL;
            ResponseDTO res = new ResponseDTO(ConstantsCodeResponse.SUCCESFUL,"Exitoso",card.toJsonString());
            callbackContext.success(responseDTOtoJsonString(res));
          }else{
            stateTx = ConstantsStates.DECLINE;
            ResponseDTO res = new ResponseDTO(ConstantsCodeResponse.ERROR,"Exitoso","");
            callbackContext.error(responseDTOtoJsonString(res));
          }

        } catch (JSONException e) {
          e.printStackTrace();
        }
      }
      else if (result == DoTradeResult.NFC_DECLINED) {
        stateTx =  ConstantsStates.DECLINE;
        callbackContext.error("");
      }
      else {
        stateTx =  ConstantsStates.DECLINE;
        callbackContext.error("");
      }
    }
    @Override
    public void onFinishMifareCardResult(boolean b) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onFinishMifareCardResult");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onFinishMifareCardResult "+b);
    }

    @Override
    public void onVerifyMifareCardResult(boolean b) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onVerifyMifareCardResult");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onVerifyMifareCardResult "+b);
    }

    @Override
    public void onReadMifareCardResult(Hashtable<String, String> hashtable) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReadMifareCardResult");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReadMifareCardResult "+hashtable);
    }

    @Override
    public void onWriteMifareCardResult(boolean b) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onWriteMifareCardResult");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onWriteMifareCardResult "+b);
    }

    @Override
    public void onOperateMifareCardResult(Hashtable<String, String> hashtable) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onOperateMifareCardResult");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onOperateMifareCardResult "+hashtable);
    }

    @Override
    public void getMifareCardVersion(Hashtable<String, String> hashtable) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "getMifareCardVersion");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"getMifareCardVersion "+hashtable);
    }

    @Override
    public void getMifareReadData(Hashtable<String, String> hashtable) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "getMifareReadData");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"getMifareReadData "+hashtable);
    }

    @Override
    public void getMifareFastReadData(Hashtable<String, String> hashtable) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "getMifareFastReadData");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"getMifareFastReadData "+hashtable);
    }

    @Override
    public void writeMifareULData(String s) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "writeMifareULData");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"writeMifareULData "+s);
    }

    @Override
    public void verifyMifareULData(Hashtable<String, String> hashtable) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "verifyMifareULData");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"verifyMifareULData "+hashtable);
    }

    @Override
    public void transferMifareData(String s) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "transferMifareData");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"transferMifareData "+s);
    }

    @Override
    public void onQposInfoResult(Hashtable<String, String> posInfoData) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onQposInfoResult");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onQposInfoResult "+posInfoData);
      String checkValueUpdate = pos.getUpdateCheckValue();
      posInfoData.put(ConstantsInfoQpos.CHECK_VALUE_UPDATE,checkValueUpdate);
      CommandInfoQpos cmd = new CommandInfoQpos();
      try {
        ResponseDTO res = cmd.getBatteryStatus(posInfoData);
        callbackContext.success(responseDTOtoJsonString(res));
      } catch (JSONException e) {
        e.printStackTrace();
      }

    }

    @Override
    public void onQposGenerateSessionKeysResult(Hashtable<String, String> hashtable) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onQposGenerateSessionKeysResult");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onQposGenerateSessionKeysResult "+hashtable);
    }

    @Override
    public void onQposDoSetRsaPublicKey(boolean b) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onQposDoSetRsaPublicKey");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onQposDoSetRsaPublicKey "+b);
    }

    @Override
    public void onRequestTransactionResult(TransactionResult transactionResult) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestTransactionResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestTransactionResult "+transactionResult);
      if(transactionResult == TransactionResult.APPROVED) {
        callbackContext.success("");
      } else if(transactionResult == TransactionResult.TERMINATED) {
        stateTx = ConstantsStates.DECLINE;
        callbackContext.error("");
      } else if(transactionResult == TransactionResult.DECLINED) {
        stateTx = ConstantsStates.DECLINE;
        callbackContext.error("");
      } else if(transactionResult == TransactionResult.CANCEL) {
        stateTx = ConstantsStates.DECLINE;
        callbackContext.error("");
      } else if(transactionResult == TransactionResult.CAPK_FAIL) {
        stateTx = ConstantsStates.DECLINE;
        callbackContext.error("");
      } else if(transactionResult == TransactionResult.NOT_ICC) {
        stateTx = ConstantsStates.DECLINE;
        callbackContext.error("");
      } else if(transactionResult == TransactionResult.SELECT_APP_FAIL) {
        stateTx = ConstantsStates.DECLINE;
        callbackContext.error("");
      } else if(transactionResult == TransactionResult.DEVICE_ERROR) {
        stateTx = ConstantsStates.DECLINE;
        callbackContext.error("");
      } else if(transactionResult == TransactionResult.CARD_NOT_SUPPORTED) {
        stateTx = ConstantsStates.DECLINE;
        callbackContext.error("");
      } else if(transactionResult == TransactionResult.TRADE_LOG_FULL) {
        stateTx = ConstantsStates.DECLINE;
        callbackContext.error("");
      } else if(transactionResult == TransactionResult.MISSING_MANDATORY_DATA) {
        stateTx = ConstantsStates.DECLINE;
        callbackContext.error("");
      } else if(transactionResult == TransactionResult.CARD_BLOCKED_OR_NO_EMV_APPS) {
        stateTx = ConstantsStates.DECLINE;
        callbackContext.error("");
      } else if(transactionResult == TransactionResult.INVALID_ICC_DATA) {
        stateTx = ConstantsStates.DECLINE;
        callbackContext.error("");
      } else if (transactionResult == TransactionResult.CARD_REMOVED) {
        stateTx = ConstantsStates.DECLINE;
        callbackContext.error("");
      }else{
        stateTx = ConstantsStates.DECLINE;
        callbackContext.error("");
      }
    }

    @Override
    public void onRequestBatchData(String tlv) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestBatchData");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestBatchData "+tlv);
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"----------BATCH DATA------------------ ");
    }

    @Override
    public void onRequestTransactionLog(String tlv) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestTransactionLog");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestTransactionLog "+tlv);
    }

    @Override
    public void onQposIdResult(Hashtable<String, String> posIdTable) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onQposIdResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onQposIdResult "+posIdTable);
      pos.getQposInfo();
    }

    @Override
    public void onRequestSelectEmvApp(ArrayList<String> appList) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestSelectEmvApp");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestSelectEmvApp "+appList);
      stateTx = ConstantsStates.SELECT_APP;
      isSelectApp = true;
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestSelectEmvApp appList :: "+appList.toString());
      listApp=appList.toString();
      // TODO Auto-generated method stub
    }

    @Override
    public void onRequestSetAmount() {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestSetAmount");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestSetAmount");
      pos.setPosDisplayAmountFlag(true);

      pos.setAmount(amount, ConstantsTransacction.CASHBACK_AMOUNT, ConstantsTransacction.CURRENCY_TYPE, TransactionType.GOODS);
    }

    @Override
    public void onRequestIsServerConnected() {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestIsServerConnected");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestIsServerConnected");
      pos.isServerConnected(true);
    }

    @Override
    public void onRequestOnlineProcess(String tlv) {
      if (deviceH.equals("A27C_P1")) {
        Log.d("QPOS_PLUGIN_NAT_INIT", "onRequestOnlineProcessMini");
        // TODO Auto-generated method stub
        Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestOnlineProcess " + tlv);
        CommandTransaction cmd = new CommandTransaction();

        try {
          stateTx = ConstantsStates.PROCESSING_STATE;
          String decodeData = pos.anlysEmvIccData(tlv).get("tlv");
          String hashtableTrack2 = pos.getICCTag(QPOSService.EncryptType.ENCRYPTED,0, 1, ConstantsTagEMV.TAG_57.getName()).get("tlv");
          String hashtableTrack2Plain = pos.getICCTag(QPOSService.EncryptType.PLAINTEXT,0, 1, ConstantsTagEMV.TAG_57.getName()).get("tlv");
          String hashtableAid = pos.getICCTag(QPOSService.EncryptType.PLAINTEXT,0, 1, ConstantsTagEMV.TAG_84.getName()).get("tlv");
          String hashtableARQC = pos.getICCTag(QPOSService.EncryptType.PLAINTEXT,0, 1, ConstantsTagEMV.TAG_9F26.getName()).get("tlv");
          ArrayList<TagEmvDTO> array = UtilityTag.getListTagEMVSale();
          String tagSale = "";
          for(TagEmvDTO tag : array){
            String infotag = pos.getICCTag(QPOSService.EncryptType.PLAINTEXT,0, 1, tag.getName()).get("tlv");
            Log.d("QPOS_PLUGIN_NATIVE", "Info TLV TAG :: "+tag.getName()+ "  "+ infotag);
            tagSale = tagSale + infotag;
          }
          card = cmd.getDataTransactionEmv(decodeData,hashtableTrack2,hashtableAid,hashtableARQC,hashtableTrack2Plain,tagSale);
          if(card != null){
            stateTx = ConstantsStates.APPROVAL;
            ResponseDTO res = new ResponseDTO(ConstantsCodeResponse.SUCCESFUL,"Exitoso",card.toJsonString());
            callbackContext.success(responseDTOtoJsonString(res));
          }else{
            stateTx = ConstantsStates.DECLINE;
            ResponseDTO res = new ResponseDTO(ConstantsCodeResponse.ERROR,"ERROR","");
            callbackContext.error(responseDTOtoJsonString(res));
          }
        } catch (JSONException e) {
          e.printStackTrace();
        }
        
      } else {
        Log.d("QPOS_PLUGIN_NAT_INIT", "onRequestOnlineProcessCute");
        // TODO Auto-generated method stub
        Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestOnlineProcess " + tlv);
        CommandTransaction cmd = new CommandTransaction();
        String decodeData;
        try {
          stateTx = ConstantsStates.PROCESSING_STATE;
          decodeData = pos.anlysEmvIccData(tlv).get("tlv");
          String hashtableTrack2 = pos.getICCTag(QPOSService.EncryptType.ENCRYPTED,0, 1, ConstantsTagEMV.TAG_57.getName()).get("tlv");
          String hashtableTrack2Plain = pos.getICCTag(QPOSService.EncryptType.PLAINTEXT,0, 1, ConstantsTagEMV.TAG_57.getName()).get("tlv");
          String hashtableAid = pos.getICCTag(QPOSService.EncryptType.PLAINTEXT,0, 1, ConstantsTagEMV.TAG_84.getName()).get("tlv");
          String hashtableARQC = pos.getICCTag(QPOSService.EncryptType.PLAINTEXT,0, 1, ConstantsTagEMV.TAG_9F26.getName()).get("tlv");
  
  
          // FOR PARA TRAER TAG VENTA
          ArrayList<TagEmvDTO> array = UtilityTag.getListTagEMVSale();
          String tagSale = "";
          for(TagEmvDTO tag : array){
            String infotag = pos.getICCTag(QPOSService.EncryptType.PLAINTEXT,0, 1, tag.getName()).get("tlv");
  
            if(infotag == null){
              Log.d("", "VAVIO_NULL_POINTER");
              infotag = "";
            }else if (infotag.isEmpty()) {
              Log.d("", "VAVIO_NULL");
              infotag = "";
            }
  
            Log.d("QPOS_PLUGIN_NATIVE", "Info TLV TAG :: "+tag.getName()+ "  "+ infotag);
            tagSale = tagSale + infotag;
          }
  
          // FOR PARA TRAER TAGS DE TARJETA
          ArrayList<TagEmvDTO> arrayNew = UtilityTag.getListTagQposNew();
          String tagSalFinal = "";
          for(TagEmvDTO tag : arrayNew){
  
            String infotag = pos.getICCTag(QPOSService.EncryptType.PLAINTEXT,0, 1, tag.getName()).get("tlv");
            if(infotag == null){
              Log.d("", "VAVIO_NULL_POINTER");
              infotag = "";
            }else if (infotag.isEmpty()) {
              Log.d("", "VAVIO_NULL");
              infotag = "";
            }
  
            Log.d("QPOS_PLUGIN_NATIVE", "Info TLV TAG FOR2:: "+tag.getName()+ "  "+ infotag);
            tagSalFinal = tagSalFinal + infotag;
          }
  
          Log.d("get_tagSale_test", tagSalFinal);
  
          // String [] tlvC = decodeData.split("9F12");
          // String nor = tlvC [1].toString();
          // String [] tramC = nor.split("C4", 2);
          // String tramitaPrueba = "C4" + tramC[1].toString();
          // Log.d("TAG_NOR:: ", nor);
          // Log.d("TAG_tramitaUju:: ", tramitaPrueba);
  
          // // FOR PARA TRAER TAGS C PROPIOS DE LOS PIROBOS DE DSPREAD
          // ArrayList<TagEmvDTO> arrayC = UtilityTag.getListTagQposC();
          // String tagSaleC = "";
          // TagEmvDTO infotagC = null;
          // for(TagEmvDTO tagC : arrayC){
          //   if (tagC.getName().equals(ConstantsTagEMV.TAG_C2.getName())) {
          //     infotagC = UtilityTag.getTagC2(tagC.getName(),tramitaPrueba);
          //   } else {
          //     infotagC = UtilityTag.getTagByName(tagC.getName(),tramitaPrueba);
          //   }
  
          //   String var = "";
  
          //   if (infotagC != null) {
          //     Log.d("", "VAVIO_NULL");
          //     tramitaPrueba = tramitaPrueba.substring(0,Integer.parseInt(infotagC.getMinLength()))+tramitaPrueba.substring(Integer.parseInt(infotagC.getMaxLength()),tramitaPrueba.length());
          //     var = infotagC.getName() + infotagC.getLength() + infotagC.getValue(); 
          //     tagSaleC = tagSaleC + var;
          //   }
          // }
          // Log.d("TAG_tramitaUjuC:: ", tagSaleC);
  
          // TagEmvDTO C4 = UtilityTag.getTagByName(ConstantsTagEMV.TAG_C4.getName(),tramitaPrueba);
          // TagEmvDTO C1 = UtilityTag.getTagByName(ConstantsTagEMV.TAG_C1.getName(),tramitaPrueba);
          // TagEmvDTO C7 = UtilityTag.getTagByName(ConstantsTagEMV.TAG_C7.getName(),tramitaPrueba);
          // TagEmvDTO C0 = UtilityTag.getTagByName(ConstantsTagEMV.TAG_C0.getName(),tramitaPrueba);
          // TagEmvDTO C2 = UtilityTag.getTagByName(ConstantsTagEMV.TAG_C2.getName(),tramitaPrueba);
  
          // String C4_ = C4.getName() + C4.getLength() + C4.getValue();
          // String C1_ = C1.getName() + C1.getLength() + C1.getValue();
          // String C7_ = C7.getName() + C7.getLength() + C7.getValue();
          // String C0_ = C0.getName() + C0.getLength() + C0.getValue();
          // String C2_ = C2.getName() + C2.getLength() + C2.getValue();
  
          // String C1_ = UtilityTag.getTagByName(ConstantsTagEMV.TAG_C1.getName(),nor).getName()+ 
          //             UtilityTag.getTagByName(ConstantsTagEMV.TAG_C1.getName(),nor).getLength() + 
          //             UtilityTag.getTagByName(ConstantsTagEMV.TAG_C1.getName(),nor).getValue();
          // String C7_ = UtilityTag.getTagByName(ConstantsTagEMV.TAG_C7.getName(),nor).getName()+ 
          //             UtilityTag.getTagByName(ConstantsTagEMV.TAG_C7.getName(),nor).getLength() + 
          //             UtilityTag.getTagByName(ConstantsTagEMV.TAG_C7.getName(),nor).getValue();
          // String C0_ = UtilityTag.getTagByName(ConstantsTagEMV.TAG_C0.getName(),nor).getName()+ 
          //             UtilityTag.getTagByName(ConstantsTagEMV.TAG_C0.getName(),nor).getLength() + 
          //             UtilityTag.getTagByName(ConstantsTagEMV.TAG_C0.getName(),nor).getValue();
          // String C2_ = UtilityTag.getTagC2(ConstantsTagEMV.TAG_C2.getName(),nor).getName() + 
          //             UtilityTag.getTagC2(ConstantsTagEMV.TAG_C2.getName(),nor).getLength() +
          //             UtilityTag.getTagC2(ConstantsTagEMV.TAG_C2.getName(),nor).getValue();
  
          // Log.d("temp4", C4_);
          // Log.d("temp1", C1_);
          // Log.d("temp7", C7_);
          // Log.d("temp0", C0_);
          // Log.d("temp2", C2_);
          // tagSalFinal += C4_ + C1_ + C7_ + C0_ + C2_;


          // tagSalFinal += tagSaleC;
          card = cmd.getDataTransactionEmv(tagSalFinal,hashtableTrack2,hashtableAid,hashtableARQC,hashtableTrack2Plain,tagSale);
          // try {
          //   Log.d("PINBLOCK_NEW", decodeData.get("pinblock"));
          //   Log.d("PINBLOCK_NEW", decodeData.get("pinKsn"));
          // } catch (Exception e) {
          //   //TODO: handle exception
          // }
          // card.setPinBlock(decodeData.get("pinblock"));
          // card.setKsnPinBlock(decodeData.get("pinKsn"));

          if(card != null){
            stateTx = ConstantsStates.APPROVAL;
            ResponseDTO res = new ResponseDTO(ConstantsCodeResponse.SUCCESFUL,"Exitoso",card.toJsonString());
            callbackContext.success(responseDTOtoJsonString(res));
          }else{
            stateTx = ConstantsStates.DECLINE;
            ResponseDTO res = new ResponseDTO(ConstantsCodeResponse.ERROR,"ERROR","");
            callbackContext.error(responseDTOtoJsonString(res));
          }
        } catch (JSONException e) {
          e.printStackTrace();
        }
        
      }
    }

    @Override
    public void onRequestTime() {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestTime");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestTime");
      String terminalTime = new SimpleDateFormat("yyyyMMddHHmmss").format(Calendar.getInstance().getTime());
      pos.sendTime(terminalTime);
    }

    @Override
    public void onRequestDisplay(Display displayMsg) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestDisplay");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestDisplay "+displayMsg);
      try{
        if(displayMsg.equals(Display.PROCESSING)){
          if(!flagPinSwipe){
            stateTx = ConstantsStates.PROCESSING_STATE;
            ResponseDTO res = new ResponseDTO(stateTx,"Procesando..","");
            callbackContext.success(responseDTOtoJsonString(res));
          }
        }else if(displayMsg.equals(Display.INPUT_PIN_ING)){
          if(!flagPinSwipe){
            stateTx = ConstantsStates.GET_PIN_STATE;
            ResponseDTO res = new ResponseDTO(stateTx,"Por favor, Digite el pin.","");
            callbackContext.success(responseDTOtoJsonString(res));
          }
        }else if(displayMsg.equals(Display.PLEASE_WAIT)){
          if(!flagPinSwipe){
            stateTx = ConstantsStates.PLEASE_WAIT_STATE;
            ResponseDTO res = new ResponseDTO(stateTx,"Por favor espere","");
            callbackContext.success(responseDTOtoJsonString(res));
          }
        }
        else if(displayMsg.equals(Display.TRANSACTION_TERMINATED)){
          stateTx = ConstantsStates.DECLINE;
          callbackContext.error("");
        }
      }catch(Exception e){
        callbackContext.error("");
      }

    }

    @Override
    public void onRequestFinalConfirm() {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestFinalConfirm");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestFinalConfirm");
      pos.finalConfirm(true);
    }

    @Override
    public void onRequestNoQposDetected() {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestNoQposDetected");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestNoQposDetected");
      callbackContext.error("");
    }

    @Override
    public void onRequestNoQposDetectedUnbond() {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestNoQposDetectedUnbond");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestNoQposDetectedUnbond");
    }

    @Override
    public void onRequestQposConnected() {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestQposConnected");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestQposConnected");

      if(flagUpdata){
        Log.d("CHAZZ", "Si hay flagUpdate -  onRequestQposConnected - Actualizando EMV ");
        flagUpdata = false;
        String emvAppCfg;
        String emvCapkCfg;
        if (IS_TEST_VERSION) {
          Log.d("CHAZZ", "Is test version -  onRequestQposConnected - Actualizando EMV ");
          emvAppCfg  = UtilityHexa.byteArray2Hex(readLine("emv_app_pru.bin"));
          emvCapkCfg = UtilityHexa.byteArray2Hex(readLine("emv_capk_pru.bin"));
        } else {
          Log.d("CHAZZ", "No Is test version -  onRequestQposConnected - Actualizando EMV ");
          emvAppCfg  = UtilityHexa.byteArray2Hex(readLine("emv_app_prod.bin"));
          emvCapkCfg = UtilityHexa.byteArray2Hex(readLine("emv_capk_prod.bin"));
        }
        Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS emvAppCfg emv_app : "+emvAppCfg);
        Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS emvCapkCfg emv_capk: "+emvCapkCfg);
        pos.updateEmvConfig(emvAppCfg,emvCapkCfg);
      }else{
       Log.d("CHAZZ", "No hay flagUpdate -  onRequestQposConnected - Actualizando EMV ");
       pos.setShutDownTime(500);
      }

    }

    @Override
    public void onRequestQposDisconnected() {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestQposDisconnected");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestQposDisconnected");
      try {
        if(!flagUpdata){
          CommandConnectionDevice cmd = new CommandConnectionDevice();
          ResponseDTO res = cmd.getDisconnectDevice();
          callbackContext.error(responseDTOtoJsonString(res));
        }
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }

    @Override
    public void onError(Error errorState) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onError");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onError "+errorState);
      stateTx = ConstantsStates.DECLINE;
      if(errorState == Error.CMD_NOT_AVAILABLE) {
        callbackContext.error(errorState.toString());
      } else if(errorState == Error.TIMEOUT) {
        callbackContext.error(errorState.toString());
      } else if(errorState == Error.DEVICE_RESET) {
        callbackContext.error(errorState.toString());
      } else if(errorState == Error.UNKNOWN) {
        callbackContext.error(errorState.toString());
      } else if(errorState == Error.DEVICE_BUSY) {
        callbackContext.error(errorState.toString());
      } else if(errorState == Error.INPUT_OUT_OF_RANGE) {
        callbackContext.error(errorState.toString());
      } else if(errorState == Error.INPUT_INVALID_FORMAT) {
        callbackContext.error(errorState.toString());
      } else if(errorState == Error.INPUT_ZERO_VALUES) {
        callbackContext.error(errorState.toString());
      } else if(errorState == Error.INPUT_INVALID) {
        callbackContext.error(errorState.toString());
      } else if(errorState == Error.CASHBACK_NOT_SUPPORTED) {
        callbackContext.error(errorState.toString());
      } else if(errorState == Error.CRC_ERROR) {
        callbackContext.error(errorState.toString());
      } else if(errorState == Error.COMM_ERROR) {
        callbackContext.error(errorState.toString());
      } else if(errorState==Error.MAC_ERROR){
        callbackContext.error(errorState.toString());
      }else if(errorState == Error.CMD_TIMEOUT){
        callbackContext.error(errorState.toString());
      }else if(errorState == Error.UNKNOWN){
        callbackContext.error(errorState.toString());
      }else{
        callbackContext.error(errorState.toString());
      }
    }

    @Override
    public void onReturnReversalData(String tlv) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnReversalData");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturnReversalData " +tlv);
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"--------------------REVERSAL DATA-------------------- " +tlv);
      callbackContext.error("");
    }

    @Override
    public void onReturnGetPinResult(Hashtable<String, String> result) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnGetPinResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturnGetPinResult"+ result);
      CommandTransaction cmd = new CommandTransaction();
      CardDTO card = cmd.getDataPinSwipeCard(null,result);
      try {
        ResponseDTO res = new ResponseDTO(ConstantsCodeResponse.SUCCESFUL,"Exitoso",card.toJsonString());
        callbackContext.success(responseDTOtoJsonString(res));
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }

    @Override
    public void onReturnPowerOnIccResult(boolean isSuccess, String ksn,
                                         String atr, int atrLen) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnPowerOnIccResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturnPowerOnIccResult "+isSuccess+" "+ksn+" "+atr+" "+atrLen);
    }

    @Override
    public void onReturnPowerOffIccResult(boolean isSuccess) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnPowerOffIccResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturnPowerOffIccResult "+isSuccess);
    }

    @Override
    public void onReturnApduResult(boolean isSuccess, String apdu, int apduLen) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnApduResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturnApduResult "+isSuccess+" "+apdu+" "+apduLen);

    }

    @Override
    public void onReturnSetSleepTimeResult(boolean arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnSetSleepTimeResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturnSetSleepTimeResult " + arg0);
      try {
        CommandConnectionDevice cmd = new CommandConnectionDevice();
        ResponseDTO res = cmd.getConnectDevice();
        callbackContext.success(responseDTOtoJsonString(res));
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }

    @Override
    public void onGetCardNoResult(String arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onGetCardNoResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onGetCardNoResult " + arg0);
    }

    @Override
    public void onRequestCalculateMac(String arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestCalculateMac");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestCalculateMac " + arg0);
    }

    @Override
    public void onRequestSignatureResult(byte[] arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestSignatureResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestSignatureResult " + arg0);
    }

    @Override
    public void onRequestUpdateWorkKeyResult(UpdateInformationResult arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestUpdateWorkKeyResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestUpdateWorkKeyResult "+ arg0);
    }

    @Override
    public void onReturnCustomConfigResult(boolean arg0, String arg1) {
      // Función que ejecuta al acabar la carga de archivos
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnCustomConfigResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturnCustomConfigResult arg0: "+arg0+" arg1: "+arg1);
      if(arg0){
        callbackContext.success("success updating emv");
      }else{
        callbackContext.error("error updating emv");
      }
    }

    @Override
    public void onRequestSetPin() {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestSetPin");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestSetPin");
    }

    @Override
    public void onReturnSetMasterKeyResult(boolean arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnSetMasterKeyResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturnSetMasterKeyResult "+arg0);
    }

    @Override
    public void onReturnBatchSendAPDUResult(
            LinkedHashMap<Integer, String> batchAPDUResult) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnBatchSendAPDUResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturnBatchSendAPDUResult "+ batchAPDUResult);
    }

    @Override
    public void onBluetoothBondFailed() {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onBluetoothBondFailed");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onBluetoothBondFailed");

    }

    @Override
    public void onBluetoothBondTimeout() {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onBluetoothBondTimeout");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onBluetoothBondTimeout");

    }

    @Override
    public void onBluetoothBonded() {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onBluetoothBonded");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onBluetoothBonded");

    }

    @Override
    public void onBluetoothBonding() {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onBluetoothBonding");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onBluetoothBonding");

    }

    @Override
    public void onReturniccCashBack(Hashtable<String, String> arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturniccCashBack");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturniccCashBack " + arg0);
    }

    @Override
    public void onLcdShowCustomDisplay(boolean arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onLcdShowCustomDisplay");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onLcdShowCustomDisplay "+arg0);

    }

    @Override
    public void onUpdatePosFirmwareResult(UpdateInformationResult arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onUpdatePosFirmwareResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onUpdatePosFirmwareResult "+arg0);
      if (arg0 == UpdateInformationResult.UPDATE_SUCCESS){
        try {
          Thread.sleep(5000);
        } catch (InterruptedException e) {
          // TODO Auto-generated catch block
          e.printStackTrace();
        }
        pos.connectBluetoothDevice(ConstantsConnection.AUTO,ConstantsConnection.BOND_TIME,address);

      }else{
        flagUpdata = false;
        callbackContext.error("");
      }


    }

    @Override
    public void onReturnDownloadRsaPublicKey(HashMap<String, String> arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnDownloadRsaPublicKey");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturnDownloadRsaPublicKey "+ arg0);
    }

    @Override
    public void onGetPosComm(int arg0, String arg1, String arg2) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onGetPosComm");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onGetPosComm "+arg0+" "+arg1+" "+arg2);
    }

    @Override
    public void onPinKey_TDES_Result(String arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onPinKey_TDES_Result");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onPinKey_TDES_Result "+arg0);
    }

    @Override
    public void onUpdateMasterKeyResult(boolean arg0,
                                        Hashtable<String, String> arg1) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onUpdateMasterKeyResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onUpdateMasterKeyResult "+arg0+" "+arg1);
    }

    @Override
    public void onEmvICCExceptionData(String arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onEmvICCExceptionData");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onEmvICCExceptionData "+arg0);
    }

    @Override
    public void onSetParamsResult(boolean arg0,
                                  Hashtable<String, Object> arg1) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onSetParamsResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onSetParamsResult "+arg0+" "+arg1);
    }

    @Override
    public void onGetInputAmountResult(boolean arg0, String arg1) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onGetInputAmountResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onGetInputAmountResult "+arg0+" "+arg1);
    }

    @Override
    public void onReturnNFCApduResult(boolean result, String apdu,
                                      int apduLen) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnNFCApduResult");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturnNFCApduResult "+result+" "+apdu+" "+apduLen);
    }

    @Override
    public void onReturnPowerOnNFCResult(boolean result, String ksn,
                                         String atr, int atrLen) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnPowerOnNFCResult");
      // TODO Auto-generated method stub
      if(result) {
        String content = "";
        content +=  ksn + "\n";
        boolean isMifareCard = false;
        if (atr.length() >=2) {
          String res = atr.substring(0,2);
          if (res.equals("02")) {
            isMifareCard = true;
          }
          atr = atr.substring(2, atr.length());
          atrLen  = atrLen -1;
        }
        content += "isMifareCard: "+ isMifareCard + "\n";
        content += atr + "\n";
        content += atrLen + "\n";
        Log.d("QPOS_PLUGIN_NATIVE", "onReturnPowerOnNFCResult success "+content);
      } else {
        Log.d("QPOS_PLUGIN_NATIVE", "onReturnPowerOnNFCResult error ");
      }

    }

    @Override
    public void onReturnPowerOffNFCResult(boolean result) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnPowerOffNFCResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturnPowerOffNFCResult "+result);
    }

    @Override
    public void onCbcMacResult(String arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onCbcMacResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onCbcMacResult "+arg0);
    }

    @Override
    public void onReadBusinessCardResult(boolean arg0, String arg1) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReadBusinessCardResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReadBusinessCardResult "+arg0+" "+arg1);
    }

    @Override
    public void onWriteBusinessCardResult(boolean arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onWriteBusinessCardResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onWriteBusinessCardResult "+arg0);
    }

    @Override
    public void onConfirmAmountResult(boolean arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onConfirmAmountResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onConfirmAmountResult "+arg0);
    }

    @Override
    public void onQposIsCardExist(boolean cardIsExist) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onQposIsCardExist");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+" onQposIsCardExist " + cardIsExist);
      if(cardIsExist){
        callbackContext.success("");
      }else{
        callbackContext.error("");
      }
    }

    @Override
    public void onSearchMifareCardResult(Hashtable<String, String> arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onSearchMifareCardResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onSearchMifareCardResult "+arg0);
    }

    @Override
    public void onBatchReadMifareCardResult(String s, Hashtable<String, List<String>> hashtable) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onBatchReadMifareCardResult");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onBatchReadMifareCardResult "+s);
    }

    @Override
    public void onBatchWriteMifareCardResult(String s, Hashtable<String, List<String>> hashtable) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onBatchWriteMifareCardResult");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onBatchWriteMifareCardResult "+s);
    }

    @Override
    public void onSetBuzzerResult(boolean arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onSetBuzzerResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onSetBuzzerResult "+arg0);
    }

    @Override
    public void onSetBuzzerTimeResult(boolean b) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onSetBuzzerTimeResult");
      // TODO Auto-generated method stubç
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onSetBuzzerTimeResult "+b);
    }

    @Override
    public void onSetBuzzerStatusResult(boolean b) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onSetBuzzerStatusResult");
// TODO Auto-generated method stubç
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onSetBuzzerStatusResult "+b);
    }

    @Override
    public void onGetBuzzerStatusResult(String s) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onGetBuzzerStatusResult");
// TODO Auto-generated method stubç
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onGetBuzzerStatusResult "+s);
    }

    @Override
    public void onSetManagementKey(boolean arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onSetManagementKey");
      // TODO Auto-generated method stubç
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onSetManagementKey "+arg0);
    }

    @Override
    public void onReturnUpdateIPEKResult(boolean arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnUpdateIPEKResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturnUpdateIPEKResult "+arg0);
      String emvAppCfg;
      String emvCapkCfg;
      if(arg0){
        if (IS_TEST_VERSION) {
          emvAppCfg  = UtilityHexa.byteArray2Hex(readLine("emv_app_pru.bin"));
          emvCapkCfg = UtilityHexa.byteArray2Hex(readLine("emv_capk_pru.bin"));
        } else {
          emvAppCfg  = UtilityHexa.byteArray2Hex(readLine("emv_app_prod.bin"));
          emvCapkCfg = UtilityHexa.byteArray2Hex(readLine("emv_capk_prod.bin"));
        }
        Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS emvAppCfg emv_app : "+emvAppCfg);
        Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS emvCapkCfg emv_capk: "+emvCapkCfg);
        pos.updateEmvConfig(emvAppCfg,emvCapkCfg);

        callbackContext.success("");
      }else{
        callbackContext.error("");
      }

    }

    @Override
    public void onReturnRSAResult(String s) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnRSAResult");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturnRSAResult "+s);
    }
    int index = 0;
    @Override
    public void onReturnUpdateEMVRIDResult(boolean arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnUpdateEMVRIDResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturnUpdateEMVRIDResult "+arg0);
      if(arg0){
//
      }else{
        Log.d("QPOS_PLUGIN_NATIVE", "update RID EMV fail");
        callbackContext.error("update RID EMV fail");
      }

    }

    @Override
    public void onReturnUpdateEMVResult(boolean arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnUpdateEMVResult CHAZZ");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturnUpdateEMVResult "+arg0);
      if(arg0){
        Log.d("QPOS_PLUGIN_NATIVE", "update EMV app success");
      }else{
        Log.d("QPOS_PLUGIN_NATIVE", "update emv app fail~");
      }

    }

    @Override
    public void onBluetoothBoardStateResult(boolean arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onBluetoothBoardStateResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onBluetoothBoardStateResult "+arg0);
    }

    @Override
    public void onDeviceFound(BluetoothDevice arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onDeviceFound");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onDeviceFound "+arg0);
    }

    @Override
    public void onSetSleepModeTime(boolean arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onSetSleepModeTime");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onSetSleepModeTime "+arg0);
      //pos.setShutDownTime(500);
    }

    @Override
    public void onGetSleepModeTime(String s) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onGetSleepModeTime");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onGetSleepModeTime "+s);
    }

    @Override
    public void onGetShutDownTime(String s) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onGetShutDownTime");
    }

    @Override
    public void onReturnGetEMVListResult(String arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnGetEMVListResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturnGetEMVListResult "+arg0);
    }

    @Override
    public void onWaitingforData(String arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onWaitingforData");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onWaitingforData "+arg0);
    }

    @Override
    public void onRequestDeviceScanFinished() {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestDeviceScanFinished");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestDeviceScanFinished");
    }

    @Override
    public void onRequestUpdateKey(String arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestUpdateKey");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestUpdateKey "+arg0);
    }

    @Override
    public void onReturnGetQuickEmvResult(boolean arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onReturnGetQuickEmvResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onReturnGetQuickEmvResult "+arg0);
    }

    @Override
    public void onAddKey(boolean arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onAddKey");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onAddKey "+arg0);
    }

    @Override
    public void onEncryptData(String arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onEncryptData");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onEncryptData "+arg0);
    }

    @Override
    public void onQposDoGetTradeLog(String arg0, String arg1) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onQposDoGetTradeLog");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onQposDoGetTradeLogNum "+arg0+" "+arg1);
    }

    @Override
    public void onRequestDevice() {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onRequestDevice");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onRequestDevice ");
    }

    @Override
    public void onGetKeyCheckValue(List<String> list) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onGetKeyCheckValue");
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onGetKeyCheckValue "+list.toString());
    }

    @Override
    public void onQposDoGetTradeLogNum(String arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onQposDoGetTradeLogNum");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onQposDoGetTradeLogNum "+arg0);
    }

    @Override
    public void onQposDoTradeLog(boolean arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onQposDoTradeLog");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onQposDoTradeLog "+arg0);

    }

    @Override
    public void onQposKsnResult(Hashtable<String, String> arg0) {
      Log.d("QPOS_PLUGIN_NATIVE_I", "onQposKsnResult");
      // TODO Auto-generated method stub
      Log.d("QPOS_PLUGIN_NATIVE", "TAG QPOS "+"onQposKsnResult "+arg0);
    }

  }

}
